# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_dctmcc')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_dctmcc')
    _dctmcc = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dctmcc', [dirname(__file__)])
        except ImportError:
            import _dctmcc
            return _dctmcc
        try:
            _mod = imp.load_module('_dctmcc', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _dctmcc = swig_import_helper()
    del swig_import_helper
else:
    import _dctmcc
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

dctunknownSymType = _dctmcc.dctunknownSymType
dctfuncSymType = _dctmcc.dctfuncSymType
dctsetSymType = _dctmcc.dctsetSymType
dctacrSymType = _dctmcc.dctacrSymType
dctparmSymType = _dctmcc.dctparmSymType
dctvarSymType = _dctmcc.dctvarSymType
dcteqnSymType = _dctmcc.dcteqnSymType
dctaliasSymType = _dctmcc.dctaliasSymType
class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _dctmcc.new_intArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dctmcc.delete_intArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _dctmcc.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _dctmcc.intArray___setitem__(self, index, value)

    def cast(self):
        return _dctmcc.intArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_dctmcc.intArray_frompointer)
    else:
        frompointer = _dctmcc.intArray_frompointer
intArray_swigregister = _dctmcc.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(t):
    return _dctmcc.intArray_frompointer(t)
intArray_frompointer = _dctmcc.intArray_frompointer

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _dctmcc.new_doubleArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dctmcc.delete_doubleArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _dctmcc.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _dctmcc.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _dctmcc.doubleArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_dctmcc.doubleArray_frompointer)
    else:
        frompointer = _dctmcc.doubleArray_frompointer
doubleArray_swigregister = _dctmcc.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t):
    return _dctmcc.doubleArray_frompointer(t)
doubleArray_frompointer = _dctmcc.doubleArray_frompointer


def new_intp():
    return _dctmcc.new_intp()
new_intp = _dctmcc.new_intp

def copy_intp(value):
    return _dctmcc.copy_intp(value)
copy_intp = _dctmcc.copy_intp

def delete_intp(obj):
    return _dctmcc.delete_intp(obj)
delete_intp = _dctmcc.delete_intp

def intp_assign(obj, value):
    return _dctmcc.intp_assign(obj, value)
intp_assign = _dctmcc.intp_assign

def intp_value(obj):
    return _dctmcc.intp_value(obj)
intp_value = _dctmcc.intp_value

def new_doublep():
    return _dctmcc.new_doublep()
new_doublep = _dctmcc.new_doublep

def copy_doublep(value):
    return _dctmcc.copy_doublep(value)
copy_doublep = _dctmcc.copy_doublep

def delete_doublep(obj):
    return _dctmcc.delete_doublep(obj)
delete_doublep = _dctmcc.delete_doublep

def doublep_assign(obj, value):
    return _dctmcc.doublep_assign(obj, value)
doublep_assign = _dctmcc.doublep_assign

def doublep_value(obj):
    return _dctmcc.doublep_value(obj)
doublep_value = _dctmcc.doublep_value

def new_dctHandle_tp():
    return _dctmcc.new_dctHandle_tp()
new_dctHandle_tp = _dctmcc.new_dctHandle_tp

def copy_dctHandle_tp(value):
    return _dctmcc.copy_dctHandle_tp(value)
copy_dctHandle_tp = _dctmcc.copy_dctHandle_tp

def delete_dctHandle_tp(obj):
    return _dctmcc.delete_dctHandle_tp(obj)
delete_dctHandle_tp = _dctmcc.delete_dctHandle_tp

def dctHandle_tp_assign(obj, value):
    return _dctmcc.dctHandle_tp_assign(obj, value)
dctHandle_tp_assign = _dctmcc.dctHandle_tp_assign

def dctHandle_tp_value(obj):
    return _dctmcc.dctHandle_tp_value(obj)
dctHandle_tp_value = _dctmcc.dctHandle_tp_value

def dctHandleToPtr(pdct):
    """dctHandleToPtr(pdct) -> void *"""
    return _dctmcc.dctHandleToPtr(pdct)

def ptrTodctHandle(vptr):
    """ptrTodctHandle(vptr) -> dctHandle_t"""
    return _dctmcc.ptrTodctHandle(vptr)

def dctGetReady(msgBufSize):
    """dctGetReady(msgBufSize) -> int"""
    return _dctmcc.dctGetReady(msgBufSize)

def dctGetReadyD(dirName, msgBufSize):
    """dctGetReadyD(dirName, msgBufSize) -> int"""
    return _dctmcc.dctGetReadyD(dirName, msgBufSize)

def dctGetReadyL(libName, msgBufSize):
    """dctGetReadyL(libName, msgBufSize) -> int"""
    return _dctmcc.dctGetReadyL(libName, msgBufSize)

def dctCreate(pdct, msgBufSize):
    """dctCreate(pdct, msgBufSize) -> int"""
    return _dctmcc.dctCreate(pdct, msgBufSize)

def dctCreateD(pdct, dirName, msgBufSize):
    """dctCreateD(pdct, dirName, msgBufSize) -> int"""
    return _dctmcc.dctCreateD(pdct, dirName, msgBufSize)

def dctCreateDD(pdct, dirName, msgBufSize):
    """dctCreateDD(pdct, dirName, msgBufSize) -> int"""
    return _dctmcc.dctCreateDD(pdct, dirName, msgBufSize)

def dctCreateL(pdct, libName, msgBufSize):
    """dctCreateL(pdct, libName, msgBufSize) -> int"""
    return _dctmcc.dctCreateL(pdct, libName, msgBufSize)

def dctFree(pdct):
    """dctFree(pdct) -> int"""
    return _dctmcc.dctFree(pdct)

def dctLibraryLoaded():
    """dctLibraryLoaded() -> int"""
    return _dctmcc.dctLibraryLoaded()

def dctLibraryUnload():
    """dctLibraryUnload() -> int"""
    return _dctmcc.dctLibraryUnload()

def dctGetScreenIndicator():
    """dctGetScreenIndicator() -> int"""
    return _dctmcc.dctGetScreenIndicator()

def dctSetScreenIndicator(scrind):
    """dctSetScreenIndicator(scrind)"""
    return _dctmcc.dctSetScreenIndicator(scrind)

def dctGetExceptionIndicator():
    """dctGetExceptionIndicator() -> int"""
    return _dctmcc.dctGetExceptionIndicator()

def dctSetExceptionIndicator(excind):
    """dctSetExceptionIndicator(excind)"""
    return _dctmcc.dctSetExceptionIndicator(excind)

def dctGetExitIndicator():
    """dctGetExitIndicator() -> int"""
    return _dctmcc.dctGetExitIndicator()

def dctSetExitIndicator(extind):
    """dctSetExitIndicator(extind)"""
    return _dctmcc.dctSetExitIndicator(extind)

def dctGetErrorCallback():
    """dctGetErrorCallback() -> dctErrorCallback_t"""
    return _dctmcc.dctGetErrorCallback()

def dctSetErrorCallback(func):
    """dctSetErrorCallback(func)"""
    return _dctmcc.dctSetErrorCallback(func)

def dctGetAPIErrorCount():
    """dctGetAPIErrorCount() -> int"""
    return _dctmcc.dctGetAPIErrorCount()

def dctSetAPIErrorCount(ecnt):
    """dctSetAPIErrorCount(ecnt)"""
    return _dctmcc.dctSetAPIErrorCount(ecnt)

def dctErrorHandling(msg):
    """dctErrorHandling(msg)"""
    return _dctmcc.dctErrorHandling(msg)

def dctLoadEx(pdct, fName, Msg_i):
    """dctLoadEx(pdct, fName, Msg_i) -> int"""
    return _dctmcc.dctLoadEx(pdct, fName, Msg_i)

def dctLoadWithHandle(pdct, gdxptr, Msg_i):
    """dctLoadWithHandle(pdct, gdxptr, Msg_i) -> int"""
    return _dctmcc.dctLoadWithHandle(pdct, gdxptr, Msg_i)

def dctNUels(pdct):
    """dctNUels(pdct) -> int"""
    return _dctmcc.dctNUels(pdct)

def dctUelIndex(pdct, uelLabel):
    """dctUelIndex(pdct, uelLabel) -> int"""
    return _dctmcc.dctUelIndex(pdct, uelLabel)

def dctUelLabel(pdct, uelIndex, q_mut, uelLabel_i):
    """dctUelLabel(pdct, uelIndex, q_mut, uelLabel_i) -> int"""
    return _dctmcc.dctUelLabel(pdct, uelIndex, q_mut, uelLabel_i)

def dctNLSyms(pdct):
    """dctNLSyms(pdct) -> int"""
    return _dctmcc.dctNLSyms(pdct)

def dctSymDim(pdct, symIndex):
    """dctSymDim(pdct, symIndex) -> int"""
    return _dctmcc.dctSymDim(pdct, symIndex)

def dctSymIndex(pdct, symName):
    """dctSymIndex(pdct, symName) -> int"""
    return _dctmcc.dctSymIndex(pdct, symName)

def dctSymName(pdct, symIndex, symName_i):
    """dctSymName(pdct, symIndex, symName_i) -> int"""
    return _dctmcc.dctSymName(pdct, symIndex, symName_i)

def dctSymText(pdct, symIndex, q_mut, symTxt_i):
    """dctSymText(pdct, symIndex, q_mut, symTxt_i) -> int"""
    return _dctmcc.dctSymText(pdct, symIndex, q_mut, symTxt_i)

def dctSymType(pdct, symIndex):
    """dctSymType(pdct, symIndex) -> int"""
    return _dctmcc.dctSymType(pdct, symIndex)

def dctSymUserInfo(pdct, symIndex):
    """dctSymUserInfo(pdct, symIndex) -> int"""
    return _dctmcc.dctSymUserInfo(pdct, symIndex)

def dctSymEntries(pdct, symIndex):
    """dctSymEntries(pdct, symIndex) -> int"""
    return _dctmcc.dctSymEntries(pdct, symIndex)

def dctSymOffset(pdct, symIndex):
    """dctSymOffset(pdct, symIndex) -> int"""
    return _dctmcc.dctSymOffset(pdct, symIndex)

def dctSymDomNames(pdct, symIndex):
    """dctSymDomNames(pdct, symIndex) -> int"""
    return _dctmcc.dctSymDomNames(pdct, symIndex)

def dctSymDomIdx(pdct, symIndex):
    """dctSymDomIdx(pdct, symIndex) -> int"""
    return _dctmcc.dctSymDomIdx(pdct, symIndex)

def dctDomNameCount(pdct):
    """dctDomNameCount(pdct) -> int"""
    return _dctmcc.dctDomNameCount(pdct)

def dctDomName(pdct, domIndex, domName_i):
    """dctDomName(pdct, domIndex, domName_i) -> int"""
    return _dctmcc.dctDomName(pdct, domIndex, domName_i)

def dctColIndex(pdct, symIndex, uelIndices):
    """dctColIndex(pdct, symIndex, uelIndices) -> int"""
    return _dctmcc.dctColIndex(pdct, symIndex, uelIndices)

def dctRowIndex(pdct, symIndex, uelIndices):
    """dctRowIndex(pdct, symIndex, uelIndices) -> int"""
    return _dctmcc.dctRowIndex(pdct, symIndex, uelIndices)

def dctColUels(pdct, j):
    """dctColUels(pdct, j) -> int"""
    return _dctmcc.dctColUels(pdct, j)

def dctRowUels(pdct, i):
    """dctRowUels(pdct, i) -> int"""
    return _dctmcc.dctRowUels(pdct, i)

def dctFindFirstRowCol(pdct, symIndex, uelIndices):
    """dctFindFirstRowCol(pdct, symIndex, uelIndices) -> void *"""
    return _dctmcc.dctFindFirstRowCol(pdct, symIndex, uelIndices)

def dctFindNextRowCol(pdct, findHandle):
    """dctFindNextRowCol(pdct, findHandle) -> int"""
    return _dctmcc.dctFindNextRowCol(pdct, findHandle)

def dctFindClose(pdct, findHandle):
    """dctFindClose(pdct, findHandle)"""
    return _dctmcc.dctFindClose(pdct, findHandle)

def dctMemUsed(pdct):
    """dctMemUsed(pdct) -> double"""
    return _dctmcc.dctMemUsed(pdct)

def dctSetBasicCounts(pdct, NRows, NCols, NBlocks):
    """dctSetBasicCounts(pdct, NRows, NCols, NBlocks)"""
    return _dctmcc.dctSetBasicCounts(pdct, NRows, NCols, NBlocks)

def dctSetBasicCountsEx(pdct, NRows, NCols, NBlocks, Msg_i):
    """dctSetBasicCountsEx(pdct, NRows, NCols, NBlocks, Msg_i) -> int"""
    return _dctmcc.dctSetBasicCountsEx(pdct, NRows, NCols, NBlocks, Msg_i)

def dctAddUel(pdct, uelLabel, q):
    """dctAddUel(pdct, uelLabel, q)"""
    return _dctmcc.dctAddUel(pdct, uelLabel, q)

def dctAddSymbol(pdct, symName, symTyp, symDim, userInfo, symTxt):
    """dctAddSymbol(pdct, symName, symTyp, symDim, userInfo, symTxt)"""
    return _dctmcc.dctAddSymbol(pdct, symName, symTyp, symDim, userInfo, symTxt)

def dctAddSymbolData(pdct, uelIndices):
    """dctAddSymbolData(pdct, uelIndices)"""
    return _dctmcc.dctAddSymbolData(pdct, uelIndices)

def dctAddSymbolDoms(pdct, symName, symDoms_in, symDim, Msg_i):
    """dctAddSymbolDoms(pdct, symName, symDoms_in, symDim, Msg_i) -> int"""
    return _dctmcc.dctAddSymbolDoms(pdct, symName, symDoms_in, symDim, Msg_i)

def dctWriteGDX(pdct, fName):
    """dctWriteGDX(pdct, fName)"""
    return _dctmcc.dctWriteGDX(pdct, fName)

def dctWriteGDXWithHandle(pdct, gdxptr):
    """dctWriteGDXWithHandle(pdct, gdxptr)"""
    return _dctmcc.dctWriteGDXWithHandle(pdct, gdxptr)

def dctNRows(pdct):
    """dctNRows(pdct) -> int"""
    return _dctmcc.dctNRows(pdct)

def dctNCols(pdct):
    """dctNCols(pdct) -> int"""
    return _dctmcc.dctNCols(pdct)

def dctLrgDim(pdct):
    """dctLrgDim(pdct) -> int"""
    return _dctmcc.dctLrgDim(pdct)
GLOBAL_MAX_INDEX_DIM = _dctmcc.GLOBAL_MAX_INDEX_DIM
GLOBAL_UEL_IDENT_SIZE = _dctmcc.GLOBAL_UEL_IDENT_SIZE
ITERLIM_INFINITY = _dctmcc.ITERLIM_INFINITY
GMS_MAX_INDEX_DIM = _dctmcc.GMS_MAX_INDEX_DIM
GMS_UEL_IDENT_SIZE = _dctmcc.GMS_UEL_IDENT_SIZE
GMS_SSSIZE = _dctmcc.GMS_SSSIZE
GMS_VARTYPE_UNKNOWN = _dctmcc.GMS_VARTYPE_UNKNOWN
GMS_VARTYPE_BINARY = _dctmcc.GMS_VARTYPE_BINARY
GMS_VARTYPE_INTEGER = _dctmcc.GMS_VARTYPE_INTEGER
GMS_VARTYPE_POSITIVE = _dctmcc.GMS_VARTYPE_POSITIVE
GMS_VARTYPE_NEGATIVE = _dctmcc.GMS_VARTYPE_NEGATIVE
GMS_VARTYPE_FREE = _dctmcc.GMS_VARTYPE_FREE
GMS_VARTYPE_SOS1 = _dctmcc.GMS_VARTYPE_SOS1
GMS_VARTYPE_SOS2 = _dctmcc.GMS_VARTYPE_SOS2
GMS_VARTYPE_SEMICONT = _dctmcc.GMS_VARTYPE_SEMICONT
GMS_VARTYPE_SEMIINT = _dctmcc.GMS_VARTYPE_SEMIINT
GMS_VARTYPE_MAX = _dctmcc.GMS_VARTYPE_MAX
GMS_EQUTYPE_E = _dctmcc.GMS_EQUTYPE_E
GMS_EQUTYPE_G = _dctmcc.GMS_EQUTYPE_G
GMS_EQUTYPE_L = _dctmcc.GMS_EQUTYPE_L
GMS_EQUTYPE_N = _dctmcc.GMS_EQUTYPE_N
GMS_EQUTYPE_X = _dctmcc.GMS_EQUTYPE_X
GMS_EQUTYPE_C = _dctmcc.GMS_EQUTYPE_C
GMS_EQUTYPE_MAX = _dctmcc.GMS_EQUTYPE_MAX
GMS_VAL_LEVEL = _dctmcc.GMS_VAL_LEVEL
GMS_VAL_MARGINAL = _dctmcc.GMS_VAL_MARGINAL
GMS_VAL_LOWER = _dctmcc.GMS_VAL_LOWER
GMS_VAL_UPPER = _dctmcc.GMS_VAL_UPPER
GMS_VAL_SCALE = _dctmcc.GMS_VAL_SCALE
GMS_VAL_MAX = _dctmcc.GMS_VAL_MAX
sv_valund = _dctmcc.sv_valund
sv_valna = _dctmcc.sv_valna
sv_valpin = _dctmcc.sv_valpin
sv_valmin = _dctmcc.sv_valmin
sv_valeps = _dctmcc.sv_valeps
sv_normal = _dctmcc.sv_normal
sv_acronym = _dctmcc.sv_acronym
GMS_SVIDX_UNDEF = _dctmcc.GMS_SVIDX_UNDEF
GMS_SVIDX_NA = _dctmcc.GMS_SVIDX_NA
GMS_SVIDX_PINF = _dctmcc.GMS_SVIDX_PINF
GMS_SVIDX_MINF = _dctmcc.GMS_SVIDX_MINF
GMS_SVIDX_EPS = _dctmcc.GMS_SVIDX_EPS
GMS_SVIDX_NORMAL = _dctmcc.GMS_SVIDX_NORMAL
GMS_SVIDX_ACR = _dctmcc.GMS_SVIDX_ACR
GMS_SVIDX_MAX = _dctmcc.GMS_SVIDX_MAX
dt_set = _dctmcc.dt_set
dt_par = _dctmcc.dt_par
dt_var = _dctmcc.dt_var
dt_equ = _dctmcc.dt_equ
dt_alias = _dctmcc.dt_alias
GMS_DT_SET = _dctmcc.GMS_DT_SET
GMS_DT_PAR = _dctmcc.GMS_DT_PAR
GMS_DT_VAR = _dctmcc.GMS_DT_VAR
GMS_DT_EQU = _dctmcc.GMS_DT_EQU
GMS_DT_ALIAS = _dctmcc.GMS_DT_ALIAS
GMS_DT_MAX = _dctmcc.GMS_DT_MAX
GMS_SV_UNDEF = _dctmcc.GMS_SV_UNDEF
GMS_SV_NA = _dctmcc.GMS_SV_NA
GMS_SV_PINF = _dctmcc.GMS_SV_PINF
GMS_SV_MINF = _dctmcc.GMS_SV_MINF
GMS_SV_EPS = _dctmcc.GMS_SV_EPS
GMS_SV_ACR = _dctmcc.GMS_SV_ACR
GMS_SV_NAINT = _dctmcc.GMS_SV_NAINT
# This file is compatible with both classic and new-style classes.


