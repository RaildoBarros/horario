# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_gmdcc')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_gmdcc')
    _gmdcc = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gmdcc', [dirname(__file__)])
        except ImportError:
            import _gmdcc
            return _gmdcc
        try:
            _mod = imp.load_module('_gmdcc', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _gmdcc = swig_import_helper()
    del swig_import_helper
else:
    import _gmdcc
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

GMD_PARAM = _gmdcc.GMD_PARAM
GMD_UPPER = _gmdcc.GMD_UPPER
GMD_LOWER = _gmdcc.GMD_LOWER
GMD_FIXED = _gmdcc.GMD_FIXED
GMD_PRIMAL = _gmdcc.GMD_PRIMAL
GMD_DUAL = _gmdcc.GMD_DUAL
GMD_DEFAULT = _gmdcc.GMD_DEFAULT
GMD_BASECASE = _gmdcc.GMD_BASECASE
GMD_ACCUMULATE = _gmdcc.GMD_ACCUMULATE
GMD_NRSYMBOLS = _gmdcc.GMD_NRSYMBOLS
GMD_NRUELS = _gmdcc.GMD_NRUELS
GMD_NAME = _gmdcc.GMD_NAME
GMD_DIM = _gmdcc.GMD_DIM
GMD_TYPE = _gmdcc.GMD_TYPE
GMD_NRRECORDS = _gmdcc.GMD_NRRECORDS
GMD_USERINFO = _gmdcc.GMD_USERINFO
GMD_EXPLTEXT = _gmdcc.GMD_EXPLTEXT
GMD_NUMBER = _gmdcc.GMD_NUMBER
GMD_WRITTENTO = _gmdcc.GMD_WRITTENTO
class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _gmdcc.new_intArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gmdcc.delete_intArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _gmdcc.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _gmdcc.intArray___setitem__(self, index, value)

    def cast(self):
        return _gmdcc.intArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_gmdcc.intArray_frompointer)
    else:
        frompointer = _gmdcc.intArray_frompointer
intArray_swigregister = _gmdcc.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(t):
    return _gmdcc.intArray_frompointer(t)
intArray_frompointer = _gmdcc.intArray_frompointer

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _gmdcc.new_doubleArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gmdcc.delete_doubleArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _gmdcc.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _gmdcc.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _gmdcc.doubleArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_gmdcc.doubleArray_frompointer)
    else:
        frompointer = _gmdcc.doubleArray_frompointer
doubleArray_swigregister = _gmdcc.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t):
    return _gmdcc.doubleArray_frompointer(t)
doubleArray_frompointer = _gmdcc.doubleArray_frompointer


def new_intp():
    return _gmdcc.new_intp()
new_intp = _gmdcc.new_intp

def copy_intp(value):
    return _gmdcc.copy_intp(value)
copy_intp = _gmdcc.copy_intp

def delete_intp(obj):
    return _gmdcc.delete_intp(obj)
delete_intp = _gmdcc.delete_intp

def intp_assign(obj, value):
    return _gmdcc.intp_assign(obj, value)
intp_assign = _gmdcc.intp_assign

def intp_value(obj):
    return _gmdcc.intp_value(obj)
intp_value = _gmdcc.intp_value

def new_doublep():
    return _gmdcc.new_doublep()
new_doublep = _gmdcc.new_doublep

def copy_doublep(value):
    return _gmdcc.copy_doublep(value)
copy_doublep = _gmdcc.copy_doublep

def delete_doublep(obj):
    return _gmdcc.delete_doublep(obj)
delete_doublep = _gmdcc.delete_doublep

def doublep_assign(obj, value):
    return _gmdcc.doublep_assign(obj, value)
doublep_assign = _gmdcc.doublep_assign

def doublep_value(obj):
    return _gmdcc.doublep_value(obj)
doublep_value = _gmdcc.doublep_value

def new_gmdHandle_tp():
    return _gmdcc.new_gmdHandle_tp()
new_gmdHandle_tp = _gmdcc.new_gmdHandle_tp

def copy_gmdHandle_tp(value):
    return _gmdcc.copy_gmdHandle_tp(value)
copy_gmdHandle_tp = _gmdcc.copy_gmdHandle_tp

def delete_gmdHandle_tp(obj):
    return _gmdcc.delete_gmdHandle_tp(obj)
delete_gmdHandle_tp = _gmdcc.delete_gmdHandle_tp

def gmdHandle_tp_assign(obj, value):
    return _gmdcc.gmdHandle_tp_assign(obj, value)
gmdHandle_tp_assign = _gmdcc.gmdHandle_tp_assign

def gmdHandle_tp_value(obj):
    return _gmdcc.gmdHandle_tp_value(obj)
gmdHandle_tp_value = _gmdcc.gmdHandle_tp_value

def new_TFindSymbol_tp():
    return _gmdcc.new_TFindSymbol_tp()
new_TFindSymbol_tp = _gmdcc.new_TFindSymbol_tp

def copy_TFindSymbol_tp(value):
    return _gmdcc.copy_TFindSymbol_tp(value)
copy_TFindSymbol_tp = _gmdcc.copy_TFindSymbol_tp

def delete_TFindSymbol_tp(obj):
    return _gmdcc.delete_TFindSymbol_tp(obj)
delete_TFindSymbol_tp = _gmdcc.delete_TFindSymbol_tp

def TFindSymbol_tp_assign(obj, value):
    return _gmdcc.TFindSymbol_tp_assign(obj, value)
TFindSymbol_tp_assign = _gmdcc.TFindSymbol_tp_assign

def TFindSymbol_tp_value(obj):
    return _gmdcc.TFindSymbol_tp_value(obj)
TFindSymbol_tp_value = _gmdcc.TFindSymbol_tp_value

def new_TDataReadRawStart_tp():
    return _gmdcc.new_TDataReadRawStart_tp()
new_TDataReadRawStart_tp = _gmdcc.new_TDataReadRawStart_tp

def copy_TDataReadRawStart_tp(value):
    return _gmdcc.copy_TDataReadRawStart_tp(value)
copy_TDataReadRawStart_tp = _gmdcc.copy_TDataReadRawStart_tp

def delete_TDataReadRawStart_tp(obj):
    return _gmdcc.delete_TDataReadRawStart_tp(obj)
delete_TDataReadRawStart_tp = _gmdcc.delete_TDataReadRawStart_tp

def TDataReadRawStart_tp_assign(obj, value):
    return _gmdcc.TDataReadRawStart_tp_assign(obj, value)
TDataReadRawStart_tp_assign = _gmdcc.TDataReadRawStart_tp_assign

def TDataReadRawStart_tp_value(obj):
    return _gmdcc.TDataReadRawStart_tp_value(obj)
TDataReadRawStart_tp_value = _gmdcc.TDataReadRawStart_tp_value

def new_TDataReadRaw_tp():
    return _gmdcc.new_TDataReadRaw_tp()
new_TDataReadRaw_tp = _gmdcc.new_TDataReadRaw_tp

def copy_TDataReadRaw_tp(value):
    return _gmdcc.copy_TDataReadRaw_tp(value)
copy_TDataReadRaw_tp = _gmdcc.copy_TDataReadRaw_tp

def delete_TDataReadRaw_tp(obj):
    return _gmdcc.delete_TDataReadRaw_tp(obj)
delete_TDataReadRaw_tp = _gmdcc.delete_TDataReadRaw_tp

def TDataReadRaw_tp_assign(obj, value):
    return _gmdcc.TDataReadRaw_tp_assign(obj, value)
TDataReadRaw_tp_assign = _gmdcc.TDataReadRaw_tp_assign

def TDataReadRaw_tp_value(obj):
    return _gmdcc.TDataReadRaw_tp_value(obj)
TDataReadRaw_tp_value = _gmdcc.TDataReadRaw_tp_value

def new_TDataReadDone_tp():
    return _gmdcc.new_TDataReadDone_tp()
new_TDataReadDone_tp = _gmdcc.new_TDataReadDone_tp

def copy_TDataReadDone_tp(value):
    return _gmdcc.copy_TDataReadDone_tp(value)
copy_TDataReadDone_tp = _gmdcc.copy_TDataReadDone_tp

def delete_TDataReadDone_tp(obj):
    return _gmdcc.delete_TDataReadDone_tp(obj)
delete_TDataReadDone_tp = _gmdcc.delete_TDataReadDone_tp

def TDataReadDone_tp_assign(obj, value):
    return _gmdcc.TDataReadDone_tp_assign(obj, value)
TDataReadDone_tp_assign = _gmdcc.TDataReadDone_tp_assign

def TDataReadDone_tp_value(obj):
    return _gmdcc.TDataReadDone_tp_value(obj)
TDataReadDone_tp_value = _gmdcc.TDataReadDone_tp_value

def new_TGetElemText_tp():
    return _gmdcc.new_TGetElemText_tp()
new_TGetElemText_tp = _gmdcc.new_TGetElemText_tp

def copy_TGetElemText_tp(value):
    return _gmdcc.copy_TGetElemText_tp(value)
copy_TGetElemText_tp = _gmdcc.copy_TGetElemText_tp

def delete_TGetElemText_tp(obj):
    return _gmdcc.delete_TGetElemText_tp(obj)
delete_TGetElemText_tp = _gmdcc.delete_TGetElemText_tp

def TGetElemText_tp_assign(obj, value):
    return _gmdcc.TGetElemText_tp_assign(obj, value)
TGetElemText_tp_assign = _gmdcc.TGetElemText_tp_assign

def TGetElemText_tp_value(obj):
    return _gmdcc.TGetElemText_tp_value(obj)
TGetElemText_tp_value = _gmdcc.TGetElemText_tp_value

def new_TPrintLog_tp():
    return _gmdcc.new_TPrintLog_tp()
new_TPrintLog_tp = _gmdcc.new_TPrintLog_tp

def copy_TPrintLog_tp(value):
    return _gmdcc.copy_TPrintLog_tp(value)
copy_TPrintLog_tp = _gmdcc.copy_TPrintLog_tp

def delete_TPrintLog_tp(obj):
    return _gmdcc.delete_TPrintLog_tp(obj)
delete_TPrintLog_tp = _gmdcc.delete_TPrintLog_tp

def TPrintLog_tp_assign(obj, value):
    return _gmdcc.TPrintLog_tp_assign(obj, value)
TPrintLog_tp_assign = _gmdcc.TPrintLog_tp_assign

def TPrintLog_tp_value(obj):
    return _gmdcc.TPrintLog_tp_value(obj)
TPrintLog_tp_value = _gmdcc.TPrintLog_tp_value

def gmdHandleToPtr(pgmd):
    """gmdHandleToPtr(pgmd) -> void *"""
    return _gmdcc.gmdHandleToPtr(pgmd)

def ptrTogmdHandle(vptr):
    """ptrTogmdHandle(vptr) -> gmdHandle_t"""
    return _gmdcc.ptrTogmdHandle(vptr)

def gmdGetReady(msgBufSize):
    """gmdGetReady(msgBufSize) -> int"""
    return _gmdcc.gmdGetReady(msgBufSize)

def gmdGetReadyD(dirName, msgBufSize):
    """gmdGetReadyD(dirName, msgBufSize) -> int"""
    return _gmdcc.gmdGetReadyD(dirName, msgBufSize)

def gmdGetReadyL(libName, msgBufSize):
    """gmdGetReadyL(libName, msgBufSize) -> int"""
    return _gmdcc.gmdGetReadyL(libName, msgBufSize)

def gmdCreate(pgmd, msgBufSize):
    """gmdCreate(pgmd, msgBufSize) -> int"""
    return _gmdcc.gmdCreate(pgmd, msgBufSize)

def gmdCreateD(pgmd, dirName, msgBufSize):
    """gmdCreateD(pgmd, dirName, msgBufSize) -> int"""
    return _gmdcc.gmdCreateD(pgmd, dirName, msgBufSize)

def gmdCreateDD(pgmd, dirName, msgBufSize):
    """gmdCreateDD(pgmd, dirName, msgBufSize) -> int"""
    return _gmdcc.gmdCreateDD(pgmd, dirName, msgBufSize)

def gmdCreateL(pgmd, libName, msgBufSize):
    """gmdCreateL(pgmd, libName, msgBufSize) -> int"""
    return _gmdcc.gmdCreateL(pgmd, libName, msgBufSize)

def gmdFree(pgmd):
    """gmdFree(pgmd) -> int"""
    return _gmdcc.gmdFree(pgmd)

def gmdLibraryLoaded():
    """gmdLibraryLoaded() -> int"""
    return _gmdcc.gmdLibraryLoaded()

def gmdLibraryUnload():
    """gmdLibraryUnload() -> int"""
    return _gmdcc.gmdLibraryUnload()

def gmdGetScreenIndicator():
    """gmdGetScreenIndicator() -> int"""
    return _gmdcc.gmdGetScreenIndicator()

def gmdSetScreenIndicator(scrind):
    """gmdSetScreenIndicator(scrind)"""
    return _gmdcc.gmdSetScreenIndicator(scrind)

def gmdGetExceptionIndicator():
    """gmdGetExceptionIndicator() -> int"""
    return _gmdcc.gmdGetExceptionIndicator()

def gmdSetExceptionIndicator(excind):
    """gmdSetExceptionIndicator(excind)"""
    return _gmdcc.gmdSetExceptionIndicator(excind)

def gmdGetExitIndicator():
    """gmdGetExitIndicator() -> int"""
    return _gmdcc.gmdGetExitIndicator()

def gmdSetExitIndicator(extind):
    """gmdSetExitIndicator(extind)"""
    return _gmdcc.gmdSetExitIndicator(extind)

def gmdGetErrorCallback():
    """gmdGetErrorCallback() -> gmdErrorCallback_t"""
    return _gmdcc.gmdGetErrorCallback()

def gmdSetErrorCallback(func):
    """gmdSetErrorCallback(func)"""
    return _gmdcc.gmdSetErrorCallback(func)

def gmdGetAPIErrorCount():
    """gmdGetAPIErrorCount() -> int"""
    return _gmdcc.gmdGetAPIErrorCount()

def gmdSetAPIErrorCount(ecnt):
    """gmdSetAPIErrorCount(ecnt)"""
    return _gmdcc.gmdSetAPIErrorCount(ecnt)

def gmdErrorHandling(msg):
    """gmdErrorHandling(msg)"""
    return _gmdcc.gmdErrorHandling(msg)

def gmdInitFromGDX(pgmd, fileName):
    """gmdInitFromGDX(pgmd, fileName) -> int"""
    return _gmdcc.gmdInitFromGDX(pgmd, fileName)

def gmdInitFromDict(pgmd, gmoPtr):
    """gmdInitFromDict(pgmd, gmoPtr) -> int"""
    return _gmdcc.gmdInitFromDict(pgmd, gmoPtr)

def gmdInitFromCMEX(pgmd, findSymbol, dataReadRawStart, dataReadRaw, dataReadDone, getElemText, printLog, usrmem):
    """gmdInitFromCMEX(pgmd, findSymbol, dataReadRawStart, dataReadRaw, dataReadDone, getElemText, printLog, usrmem) -> int"""
    return _gmdcc.gmdInitFromCMEX(pgmd, findSymbol, dataReadRawStart, dataReadRaw, dataReadDone, getElemText, printLog, usrmem)

def gmdInitFromDB(pgmd, gmdSrcPtr):
    """gmdInitFromDB(pgmd, gmdSrcPtr) -> int"""
    return _gmdcc.gmdInitFromDB(pgmd, gmdSrcPtr)

def gmdRegisterGMO(pgmd, gmoPtr):
    """gmdRegisterGMO(pgmd, gmoPtr) -> int"""
    return _gmdcc.gmdRegisterGMO(pgmd, gmoPtr)

def gmdCloseGDX(pgmd, loadRemain):
    """gmdCloseGDX(pgmd, loadRemain) -> int"""
    return _gmdcc.gmdCloseGDX(pgmd, loadRemain)

def gmdAddSymbolXPy(pgmd, symName, aDim, stype, userInfo, explText, vDomPtrIn, keyStr_in, status):
    """gmdAddSymbolXPy(pgmd, symName, aDim, stype, userInfo, explText, vDomPtrIn, keyStr_in, status) -> void *"""
    return _gmdcc.gmdAddSymbolXPy(pgmd, symName, aDim, stype, userInfo, explText, vDomPtrIn, keyStr_in, status)

def gmdAddSymbolPy(pgmd, symName, aDim, stype, userInfo, explText, status):
    """gmdAddSymbolPy(pgmd, symName, aDim, stype, userInfo, explText, status) -> void *"""
    return _gmdcc.gmdAddSymbolPy(pgmd, symName, aDim, stype, userInfo, explText, status)

def gmdFindSymbolPy(pgmd, symName, status):
    """gmdFindSymbolPy(pgmd, symName, status) -> void *"""
    return _gmdcc.gmdFindSymbolPy(pgmd, symName, status)

def gmdGetSymbolByIndexPy(pgmd, idx, status):
    """gmdGetSymbolByIndexPy(pgmd, idx, status) -> void *"""
    return _gmdcc.gmdGetSymbolByIndexPy(pgmd, idx, status)

def gmdClearSymbol(pgmd, symPtr):
    """gmdClearSymbol(pgmd, symPtr) -> int"""
    return _gmdcc.gmdClearSymbol(pgmd, symPtr)

def gmdCopySymbol(pgmd, tarSymPtr, srcSymPtr):
    """gmdCopySymbol(pgmd, tarSymPtr, srcSymPtr) -> int"""
    return _gmdcc.gmdCopySymbol(pgmd, tarSymPtr, srcSymPtr)

def gmdFindRecordPy(pgmd, symPtr, keyStr_in, status):
    """gmdFindRecordPy(pgmd, symPtr, keyStr_in, status) -> void *"""
    return _gmdcc.gmdFindRecordPy(pgmd, symPtr, keyStr_in, status)

def gmdFindFirstRecordPy(pgmd, symPtr, status):
    """gmdFindFirstRecordPy(pgmd, symPtr, status) -> void *"""
    return _gmdcc.gmdFindFirstRecordPy(pgmd, symPtr, status)

def gmdFindFirstRecordSlicePy(pgmd, symPtr, keyStr_in, status):
    """gmdFindFirstRecordSlicePy(pgmd, symPtr, keyStr_in, status) -> void *"""
    return _gmdcc.gmdFindFirstRecordSlicePy(pgmd, symPtr, keyStr_in, status)

def gmdFindLastRecordPy(pgmd, symPtr, status):
    """gmdFindLastRecordPy(pgmd, symPtr, status) -> void *"""
    return _gmdcc.gmdFindLastRecordPy(pgmd, symPtr, status)

def gmdFindLastRecordSlicePy(pgmd, symPtr, keyStr_in, status):
    """gmdFindLastRecordSlicePy(pgmd, symPtr, keyStr_in, status) -> void *"""
    return _gmdcc.gmdFindLastRecordSlicePy(pgmd, symPtr, keyStr_in, status)

def gmdRecordMoveNext(pgmd, symIterPtr):
    """gmdRecordMoveNext(pgmd, symIterPtr) -> int"""
    return _gmdcc.gmdRecordMoveNext(pgmd, symIterPtr)

def gmdRecordHasNext(pgmd, symIterPtr):
    """gmdRecordHasNext(pgmd, symIterPtr) -> int"""
    return _gmdcc.gmdRecordHasNext(pgmd, symIterPtr)

def gmdRecordMovePrev(pgmd, symIterPtr):
    """gmdRecordMovePrev(pgmd, symIterPtr) -> int"""
    return _gmdcc.gmdRecordMovePrev(pgmd, symIterPtr)

def gmdSameRecord(pgmd, symIterPtrSrc, symIterPtrtar):
    """gmdSameRecord(pgmd, symIterPtrSrc, symIterPtrtar) -> int"""
    return _gmdcc.gmdSameRecord(pgmd, symIterPtrSrc, symIterPtrtar)

def gmdRecordHasPrev(pgmd, symIterPtr):
    """gmdRecordHasPrev(pgmd, symIterPtr) -> int"""
    return _gmdcc.gmdRecordHasPrev(pgmd, symIterPtr)

def gmdGetElemText(pgmd, symIterPtr):
    """gmdGetElemText(pgmd, symIterPtr) -> int"""
    return _gmdcc.gmdGetElemText(pgmd, symIterPtr)

def gmdGetLevel(pgmd, symIterPtr):
    """gmdGetLevel(pgmd, symIterPtr) -> int"""
    return _gmdcc.gmdGetLevel(pgmd, symIterPtr)

def gmdGetLower(pgmd, symIterPtr):
    """gmdGetLower(pgmd, symIterPtr) -> int"""
    return _gmdcc.gmdGetLower(pgmd, symIterPtr)

def gmdGetUpper(pgmd, symIterPtr):
    """gmdGetUpper(pgmd, symIterPtr) -> int"""
    return _gmdcc.gmdGetUpper(pgmd, symIterPtr)

def gmdGetMarginal(pgmd, symIterPtr):
    """gmdGetMarginal(pgmd, symIterPtr) -> int"""
    return _gmdcc.gmdGetMarginal(pgmd, symIterPtr)

def gmdGetScale(pgmd, symIterPtr):
    """gmdGetScale(pgmd, symIterPtr) -> int"""
    return _gmdcc.gmdGetScale(pgmd, symIterPtr)

def gmdSetElemText(pgmd, symIterPtr, txt):
    """gmdSetElemText(pgmd, symIterPtr, txt) -> int"""
    return _gmdcc.gmdSetElemText(pgmd, symIterPtr, txt)

def gmdSetLevel(pgmd, symIterPtr, value):
    """gmdSetLevel(pgmd, symIterPtr, value) -> int"""
    return _gmdcc.gmdSetLevel(pgmd, symIterPtr, value)

def gmdSetLower(pgmd, symIterPtr, value):
    """gmdSetLower(pgmd, symIterPtr, value) -> int"""
    return _gmdcc.gmdSetLower(pgmd, symIterPtr, value)

def gmdSetUpper(pgmd, symIterPtr, value):
    """gmdSetUpper(pgmd, symIterPtr, value) -> int"""
    return _gmdcc.gmdSetUpper(pgmd, symIterPtr, value)

def gmdSetMarginal(pgmd, symIterPtr, value):
    """gmdSetMarginal(pgmd, symIterPtr, value) -> int"""
    return _gmdcc.gmdSetMarginal(pgmd, symIterPtr, value)

def gmdSetScale(pgmd, symIterPtr, value):
    """gmdSetScale(pgmd, symIterPtr, value) -> int"""
    return _gmdcc.gmdSetScale(pgmd, symIterPtr, value)

def gmdSetUserInfo(pgmd, symPtr, value):
    """gmdSetUserInfo(pgmd, symPtr, value) -> int"""
    return _gmdcc.gmdSetUserInfo(pgmd, symPtr, value)

def gmdAddRecordPy(pgmd, symPtr, keyStr_in, status):
    """gmdAddRecordPy(pgmd, symPtr, keyStr_in, status) -> void *"""
    return _gmdcc.gmdAddRecordPy(pgmd, symPtr, keyStr_in, status)

def gmdAddRecordRaw(pgmd, symPtr, keyInt, values, eText):
    """gmdAddRecordRaw(pgmd, symPtr, keyInt, values, eText) -> int"""
    return _gmdcc.gmdAddRecordRaw(pgmd, symPtr, keyInt, values, eText)

def gmdDeleteRecord(pgmd, symIterPtr):
    """gmdDeleteRecord(pgmd, symIterPtr) -> int"""
    return _gmdcc.gmdDeleteRecord(pgmd, symIterPtr)

def gmdGetRecordRaw(pgmd, symIterPtr, aDim):
    """gmdGetRecordRaw(pgmd, symIterPtr, aDim) -> int"""
    return _gmdcc.gmdGetRecordRaw(pgmd, symIterPtr, aDim)

def gmdGetKeys(pgmd, symIterPtr, aDim):
    """gmdGetKeys(pgmd, symIterPtr, aDim) -> int"""
    return _gmdcc.gmdGetKeys(pgmd, symIterPtr, aDim)

def gmdGetKey(pgmd, symIterPtr, idx):
    """gmdGetKey(pgmd, symIterPtr, idx) -> int"""
    return _gmdcc.gmdGetKey(pgmd, symIterPtr, idx)

def gmdGetDomain(pgmd, symPtr, aDim):
    """gmdGetDomain(pgmd, symPtr, aDim) -> int"""
    return _gmdcc.gmdGetDomain(pgmd, symPtr, aDim)

def gmdCopySymbolIteratorPy(pgmd, symIterPtrSrc, status):
    """gmdCopySymbolIteratorPy(pgmd, symIterPtrSrc, status) -> void *"""
    return _gmdcc.gmdCopySymbolIteratorPy(pgmd, symIterPtrSrc, status)

def gmdFreeSymbolIterator(pgmd, symIterPtr):
    """gmdFreeSymbolIterator(pgmd, symIterPtr) -> int"""
    return _gmdcc.gmdFreeSymbolIterator(pgmd, symIterPtr)

def gmdMergeUel(pgmd, uel):
    """gmdMergeUel(pgmd, uel) -> int"""
    return _gmdcc.gmdMergeUel(pgmd, uel)

def gmdGetUelByIndex(pgmd, uelNr):
    """gmdGetUelByIndex(pgmd, uelNr) -> int"""
    return _gmdcc.gmdGetUelByIndex(pgmd, uelNr)

def gmdInfo(pgmd, infoKey):
    """gmdInfo(pgmd, infoKey) -> int"""
    return _gmdcc.gmdInfo(pgmd, infoKey)

def gmdSymbolInfo(pgmd, symPtr, infoKey):
    """gmdSymbolInfo(pgmd, symPtr, infoKey) -> int"""
    return _gmdcc.gmdSymbolInfo(pgmd, symPtr, infoKey)

def gmdSymbolDim(pgmd, symPtr):
    """gmdSymbolDim(pgmd, symPtr) -> int"""
    return _gmdcc.gmdSymbolDim(pgmd, symPtr)

def gmdSymbolType(pgmd, symPtr):
    """gmdSymbolType(pgmd, symPtr) -> int"""
    return _gmdcc.gmdSymbolType(pgmd, symPtr)

def gmdWriteGDX(pgmd, fileName, noDomChk):
    """gmdWriteGDX(pgmd, fileName, noDomChk) -> int"""
    return _gmdcc.gmdWriteGDX(pgmd, fileName, noDomChk)

def gmdSetSpecialValuesX(pgmd, specVal, INOUT):
    """gmdSetSpecialValuesX(pgmd, specVal, INOUT) -> int"""
    return _gmdcc.gmdSetSpecialValuesX(pgmd, specVal, INOUT)

def gmdSetSpecialValues(pgmd, specVal):
    """gmdSetSpecialValues(pgmd, specVal) -> int"""
    return _gmdcc.gmdSetSpecialValues(pgmd, specVal)

def gmdGetSpecialValues(pgmd, specVal):
    """gmdGetSpecialValues(pgmd, specVal) -> int"""
    return _gmdcc.gmdGetSpecialValues(pgmd, specVal)

def gmdSetDebug(pgmd, debugLevel):
    """gmdSetDebug(pgmd, debugLevel) -> int"""
    return _gmdcc.gmdSetDebug(pgmd, debugLevel)

def gmdGetLastError(pgmd):
    """gmdGetLastError(pgmd) -> int"""
    return _gmdcc.gmdGetLastError(pgmd)

def gmdPrintLog(pgmd, msg):
    """gmdPrintLog(pgmd, msg) -> int"""
    return _gmdcc.gmdPrintLog(pgmd, msg)

def gmdStartWriteRecording(pgmd):
    """gmdStartWriteRecording(pgmd) -> int"""
    return _gmdcc.gmdStartWriteRecording(pgmd)

def gmdStopWriteRecording(pgmd):
    """gmdStopWriteRecording(pgmd) -> int"""
    return _gmdcc.gmdStopWriteRecording(pgmd)

def gmdCheckDBDV(pgmd, dv):
    """gmdCheckDBDV(pgmd, dv) -> int"""
    return _gmdcc.gmdCheckDBDV(pgmd, dv)

def gmdCheckSymbolDV(pgmd, symPtr, dv):
    """gmdCheckSymbolDV(pgmd, symPtr, dv) -> int"""
    return _gmdcc.gmdCheckSymbolDV(pgmd, symPtr, dv)

def gmdGetFirstDBDVPy(pgmd, status):
    """gmdGetFirstDBDVPy(pgmd, status) -> void *"""
    return _gmdcc.gmdGetFirstDBDVPy(pgmd, status)

def gmdGetFirstDVInSymbolPy(pgmd, symPtr, status):
    """gmdGetFirstDVInSymbolPy(pgmd, symPtr, status) -> void *"""
    return _gmdcc.gmdGetFirstDVInSymbolPy(pgmd, symPtr, status)

def gmdDomainCheckDone(pgmd):
    """gmdDomainCheckDone(pgmd) -> int"""
    return _gmdcc.gmdDomainCheckDone(pgmd)

def gmdGetFirstDVInNextSymbol(pgmd, dvHandle, nextavail):
    """gmdGetFirstDVInNextSymbol(pgmd, dvHandle, nextavail) -> int"""
    return _gmdcc.gmdGetFirstDVInNextSymbol(pgmd, dvHandle, nextavail)

def gmdMoveNextDVInSymbol(pgmd, dvHandle, nextavail):
    """gmdMoveNextDVInSymbol(pgmd, dvHandle, nextavail) -> int"""
    return _gmdcc.gmdMoveNextDVInSymbol(pgmd, dvHandle, nextavail)

def gmdFreeDVHandle(pgmd, dvHandle):
    """gmdFreeDVHandle(pgmd, dvHandle) -> int"""
    return _gmdcc.gmdFreeDVHandle(pgmd, dvHandle)

def gmdGetDVSymbolPy(pgmd, dvHandle, status):
    """gmdGetDVSymbolPy(pgmd, dvHandle, status) -> void *"""
    return _gmdcc.gmdGetDVSymbolPy(pgmd, dvHandle, status)

def gmdGetDVSymbolRecordPy(pgmd, dvHandle, status):
    """gmdGetDVSymbolRecordPy(pgmd, dvHandle, status) -> void *"""
    return _gmdcc.gmdGetDVSymbolRecordPy(pgmd, dvHandle, status)

def gmdGetDVIndicator(pgmd, dvHandle, viol):
    """gmdGetDVIndicator(pgmd, dvHandle, viol) -> int"""
    return _gmdcc.gmdGetDVIndicator(pgmd, dvHandle, viol)

def gmdInitUpdate(pgmd, gmoPtr):
    """gmdInitUpdate(pgmd, gmoPtr) -> int"""
    return _gmdcc.gmdInitUpdate(pgmd, gmoPtr)

def gmdUpdateModelSymbol(pgmd, gamsSymPtr, actionType, dataSymPtr, updateType, INOUT):
    """gmdUpdateModelSymbol(pgmd, gamsSymPtr, actionType, dataSymPtr, updateType, INOUT) -> int"""
    return _gmdcc.gmdUpdateModelSymbol(pgmd, gamsSymPtr, actionType, dataSymPtr, updateType, INOUT)

def gmdCallSolver(pgmd, solvername):
    """gmdCallSolver(pgmd, solvername) -> int"""
    return _gmdcc.gmdCallSolver(pgmd, solvername)

def gmdCallSolverTimed(pgmd, solvername):
    """gmdCallSolverTimed(pgmd, solvername) -> int"""
    return _gmdcc.gmdCallSolverTimed(pgmd, solvername)

def gmdDenseSymbolToDenseArray(pgmd, cube, vDim, symPtr, field):
    """gmdDenseSymbolToDenseArray(pgmd, cube, vDim, symPtr, field) -> int"""
    return _gmdcc.gmdDenseSymbolToDenseArray(pgmd, cube, vDim, symPtr, field)

def gmdSparseSymbolToDenseArray(pgmd, cube, vDim, symPtr, vDomPtr, field):
    """gmdSparseSymbolToDenseArray(pgmd, cube, vDim, symPtr, vDomPtr, field) -> int"""
    return _gmdcc.gmdSparseSymbolToDenseArray(pgmd, cube, vDim, symPtr, vDomPtr, field)

def gmdSparseSymbolToSqzdArray(pgmd, cube, vDim, symPtr, vDomSqueezePtr, vDomPtr, field):
    """gmdSparseSymbolToSqzdArray(pgmd, cube, vDim, symPtr, vDomSqueezePtr, vDomPtr, field) -> int"""
    return _gmdcc.gmdSparseSymbolToSqzdArray(pgmd, cube, vDim, symPtr, vDomSqueezePtr, vDomPtr, field)

def gmdDenseArrayToSymbol(pgmd, symPtr, vDomPtr, cube, vDim):
    """gmdDenseArrayToSymbol(pgmd, symPtr, vDomPtr, cube, vDim) -> int"""
    return _gmdcc.gmdDenseArrayToSymbol(pgmd, symPtr, vDomPtr, cube, vDim)

def gmdDenseArraySlicesToSymbol(pgmd, symPtr, vDomSlicePtr, vDomPtr, cube, vDim):
    """gmdDenseArraySlicesToSymbol(pgmd, symPtr, vDomSlicePtr, vDomPtr, cube, vDim) -> int"""
    return _gmdcc.gmdDenseArraySlicesToSymbol(pgmd, symPtr, vDomSlicePtr, vDomPtr, cube, vDim)
GLOBAL_MAX_INDEX_DIM = _gmdcc.GLOBAL_MAX_INDEX_DIM
GLOBAL_UEL_IDENT_SIZE = _gmdcc.GLOBAL_UEL_IDENT_SIZE
ITERLIM_INFINITY = _gmdcc.ITERLIM_INFINITY
GMS_MAX_INDEX_DIM = _gmdcc.GMS_MAX_INDEX_DIM
GMS_UEL_IDENT_SIZE = _gmdcc.GMS_UEL_IDENT_SIZE
GMS_SSSIZE = _gmdcc.GMS_SSSIZE
GMS_VARTYPE_UNKNOWN = _gmdcc.GMS_VARTYPE_UNKNOWN
GMS_VARTYPE_BINARY = _gmdcc.GMS_VARTYPE_BINARY
GMS_VARTYPE_INTEGER = _gmdcc.GMS_VARTYPE_INTEGER
GMS_VARTYPE_POSITIVE = _gmdcc.GMS_VARTYPE_POSITIVE
GMS_VARTYPE_NEGATIVE = _gmdcc.GMS_VARTYPE_NEGATIVE
GMS_VARTYPE_FREE = _gmdcc.GMS_VARTYPE_FREE
GMS_VARTYPE_SOS1 = _gmdcc.GMS_VARTYPE_SOS1
GMS_VARTYPE_SOS2 = _gmdcc.GMS_VARTYPE_SOS2
GMS_VARTYPE_SEMICONT = _gmdcc.GMS_VARTYPE_SEMICONT
GMS_VARTYPE_SEMIINT = _gmdcc.GMS_VARTYPE_SEMIINT
GMS_VARTYPE_MAX = _gmdcc.GMS_VARTYPE_MAX
GMS_EQUTYPE_E = _gmdcc.GMS_EQUTYPE_E
GMS_EQUTYPE_G = _gmdcc.GMS_EQUTYPE_G
GMS_EQUTYPE_L = _gmdcc.GMS_EQUTYPE_L
GMS_EQUTYPE_N = _gmdcc.GMS_EQUTYPE_N
GMS_EQUTYPE_X = _gmdcc.GMS_EQUTYPE_X
GMS_EQUTYPE_C = _gmdcc.GMS_EQUTYPE_C
GMS_EQUTYPE_MAX = _gmdcc.GMS_EQUTYPE_MAX
GMS_VAL_LEVEL = _gmdcc.GMS_VAL_LEVEL
GMS_VAL_MARGINAL = _gmdcc.GMS_VAL_MARGINAL
GMS_VAL_LOWER = _gmdcc.GMS_VAL_LOWER
GMS_VAL_UPPER = _gmdcc.GMS_VAL_UPPER
GMS_VAL_SCALE = _gmdcc.GMS_VAL_SCALE
GMS_VAL_MAX = _gmdcc.GMS_VAL_MAX
sv_valund = _gmdcc.sv_valund
sv_valna = _gmdcc.sv_valna
sv_valpin = _gmdcc.sv_valpin
sv_valmin = _gmdcc.sv_valmin
sv_valeps = _gmdcc.sv_valeps
sv_normal = _gmdcc.sv_normal
sv_acronym = _gmdcc.sv_acronym
GMS_SVIDX_UNDEF = _gmdcc.GMS_SVIDX_UNDEF
GMS_SVIDX_NA = _gmdcc.GMS_SVIDX_NA
GMS_SVIDX_PINF = _gmdcc.GMS_SVIDX_PINF
GMS_SVIDX_MINF = _gmdcc.GMS_SVIDX_MINF
GMS_SVIDX_EPS = _gmdcc.GMS_SVIDX_EPS
GMS_SVIDX_NORMAL = _gmdcc.GMS_SVIDX_NORMAL
GMS_SVIDX_ACR = _gmdcc.GMS_SVIDX_ACR
GMS_SVIDX_MAX = _gmdcc.GMS_SVIDX_MAX
dt_set = _gmdcc.dt_set
dt_par = _gmdcc.dt_par
dt_var = _gmdcc.dt_var
dt_equ = _gmdcc.dt_equ
dt_alias = _gmdcc.dt_alias
GMS_DT_SET = _gmdcc.GMS_DT_SET
GMS_DT_PAR = _gmdcc.GMS_DT_PAR
GMS_DT_VAR = _gmdcc.GMS_DT_VAR
GMS_DT_EQU = _gmdcc.GMS_DT_EQU
GMS_DT_ALIAS = _gmdcc.GMS_DT_ALIAS
GMS_DT_MAX = _gmdcc.GMS_DT_MAX
GMS_SV_UNDEF = _gmdcc.GMS_SV_UNDEF
GMS_SV_NA = _gmdcc.GMS_SV_NA
GMS_SV_PINF = _gmdcc.GMS_SV_PINF
GMS_SV_MINF = _gmdcc.GMS_SV_MINF
GMS_SV_EPS = _gmdcc.GMS_SV_EPS
GMS_SV_ACR = _gmdcc.GMS_SV_ACR
GMS_SV_NAINT = _gmdcc.GMS_SV_NAINT
# This file is compatible with both classic and new-style classes.


