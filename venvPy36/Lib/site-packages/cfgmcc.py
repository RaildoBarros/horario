# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_cfgmcc')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_cfgmcc')
    _cfgmcc = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cfgmcc', [dirname(__file__)])
        except ImportError:
            import _cfgmcc
            return _cfgmcc
        try:
            _mod = imp.load_module('_cfgmcc', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _cfgmcc = swig_import_helper()
    del swig_import_helper
else:
    import _cfgmcc
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

cfgProc_none = _cfgmcc.cfgProc_none
cfgProc_lp = _cfgmcc.cfgProc_lp
cfgProc_mip = _cfgmcc.cfgProc_mip
cfgProc_rmip = _cfgmcc.cfgProc_rmip
cfgProc_nlp = _cfgmcc.cfgProc_nlp
cfgProc_mcp = _cfgmcc.cfgProc_mcp
cfgProc_mpec = _cfgmcc.cfgProc_mpec
cfgProc_rmpec = _cfgmcc.cfgProc_rmpec
cfgProc_cns = _cfgmcc.cfgProc_cns
cfgProc_dnlp = _cfgmcc.cfgProc_dnlp
cfgProc_rminlp = _cfgmcc.cfgProc_rminlp
cfgProc_minlp = _cfgmcc.cfgProc_minlp
cfgProc_qcp = _cfgmcc.cfgProc_qcp
cfgProc_miqcp = _cfgmcc.cfgProc_miqcp
cfgProc_rmiqcp = _cfgmcc.cfgProc_rmiqcp
cfgProc_emp = _cfgmcc.cfgProc_emp
cfgProc_nrofmodeltypes = _cfgmcc.cfgProc_nrofmodeltypes
class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _cfgmcc.new_intArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cfgmcc.delete_intArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _cfgmcc.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _cfgmcc.intArray___setitem__(self, index, value)

    def cast(self):
        return _cfgmcc.intArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_cfgmcc.intArray_frompointer)
    else:
        frompointer = _cfgmcc.intArray_frompointer
intArray_swigregister = _cfgmcc.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(t):
    return _cfgmcc.intArray_frompointer(t)
intArray_frompointer = _cfgmcc.intArray_frompointer

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _cfgmcc.new_doubleArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cfgmcc.delete_doubleArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _cfgmcc.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _cfgmcc.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _cfgmcc.doubleArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_cfgmcc.doubleArray_frompointer)
    else:
        frompointer = _cfgmcc.doubleArray_frompointer
doubleArray_swigregister = _cfgmcc.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t):
    return _cfgmcc.doubleArray_frompointer(t)
doubleArray_frompointer = _cfgmcc.doubleArray_frompointer


def new_intp():
    return _cfgmcc.new_intp()
new_intp = _cfgmcc.new_intp

def copy_intp(value):
    return _cfgmcc.copy_intp(value)
copy_intp = _cfgmcc.copy_intp

def delete_intp(obj):
    return _cfgmcc.delete_intp(obj)
delete_intp = _cfgmcc.delete_intp

def intp_assign(obj, value):
    return _cfgmcc.intp_assign(obj, value)
intp_assign = _cfgmcc.intp_assign

def intp_value(obj):
    return _cfgmcc.intp_value(obj)
intp_value = _cfgmcc.intp_value

def new_doublep():
    return _cfgmcc.new_doublep()
new_doublep = _cfgmcc.new_doublep

def copy_doublep(value):
    return _cfgmcc.copy_doublep(value)
copy_doublep = _cfgmcc.copy_doublep

def delete_doublep(obj):
    return _cfgmcc.delete_doublep(obj)
delete_doublep = _cfgmcc.delete_doublep

def doublep_assign(obj, value):
    return _cfgmcc.doublep_assign(obj, value)
doublep_assign = _cfgmcc.doublep_assign

def doublep_value(obj):
    return _cfgmcc.doublep_value(obj)
doublep_value = _cfgmcc.doublep_value

def new_cfgHandle_tp():
    return _cfgmcc.new_cfgHandle_tp()
new_cfgHandle_tp = _cfgmcc.new_cfgHandle_tp

def copy_cfgHandle_tp(value):
    return _cfgmcc.copy_cfgHandle_tp(value)
copy_cfgHandle_tp = _cfgmcc.copy_cfgHandle_tp

def delete_cfgHandle_tp(obj):
    return _cfgmcc.delete_cfgHandle_tp(obj)
delete_cfgHandle_tp = _cfgmcc.delete_cfgHandle_tp

def cfgHandle_tp_assign(obj, value):
    return _cfgmcc.cfgHandle_tp_assign(obj, value)
cfgHandle_tp_assign = _cfgmcc.cfgHandle_tp_assign

def cfgHandle_tp_value(obj):
    return _cfgmcc.cfgHandle_tp_value(obj)
cfgHandle_tp_value = _cfgmcc.cfgHandle_tp_value

def cfgHandleToPtr(pcfg):
    """cfgHandleToPtr(pcfg) -> void *"""
    return _cfgmcc.cfgHandleToPtr(pcfg)

def ptrTocfgHandle(vptr):
    """ptrTocfgHandle(vptr) -> cfgHandle_t"""
    return _cfgmcc.ptrTocfgHandle(vptr)

def cfgGetReady(msgBufSize):
    """cfgGetReady(msgBufSize) -> int"""
    return _cfgmcc.cfgGetReady(msgBufSize)

def cfgGetReadyD(dirName, msgBufSize):
    """cfgGetReadyD(dirName, msgBufSize) -> int"""
    return _cfgmcc.cfgGetReadyD(dirName, msgBufSize)

def cfgGetReadyL(libName, msgBufSize):
    """cfgGetReadyL(libName, msgBufSize) -> int"""
    return _cfgmcc.cfgGetReadyL(libName, msgBufSize)

def cfgCreate(pcfg, msgBufSize):
    """cfgCreate(pcfg, msgBufSize) -> int"""
    return _cfgmcc.cfgCreate(pcfg, msgBufSize)

def cfgCreateD(pcfg, dirName, msgBufSize):
    """cfgCreateD(pcfg, dirName, msgBufSize) -> int"""
    return _cfgmcc.cfgCreateD(pcfg, dirName, msgBufSize)

def cfgCreateL(pcfg, libName, msgBufSize):
    """cfgCreateL(pcfg, libName, msgBufSize) -> int"""
    return _cfgmcc.cfgCreateL(pcfg, libName, msgBufSize)

def cfgFree(pcfg):
    """cfgFree(pcfg) -> int"""
    return _cfgmcc.cfgFree(pcfg)

def cfgLibraryLoaded():
    """cfgLibraryLoaded() -> int"""
    return _cfgmcc.cfgLibraryLoaded()

def cfgLibraryUnload():
    """cfgLibraryUnload() -> int"""
    return _cfgmcc.cfgLibraryUnload()

def cfgGetScreenIndicator():
    """cfgGetScreenIndicator() -> int"""
    return _cfgmcc.cfgGetScreenIndicator()

def cfgSetScreenIndicator(scrind):
    """cfgSetScreenIndicator(scrind)"""
    return _cfgmcc.cfgSetScreenIndicator(scrind)

def cfgGetExceptionIndicator():
    """cfgGetExceptionIndicator() -> int"""
    return _cfgmcc.cfgGetExceptionIndicator()

def cfgSetExceptionIndicator(excind):
    """cfgSetExceptionIndicator(excind)"""
    return _cfgmcc.cfgSetExceptionIndicator(excind)

def cfgGetExitIndicator():
    """cfgGetExitIndicator() -> int"""
    return _cfgmcc.cfgGetExitIndicator()

def cfgSetExitIndicator(extind):
    """cfgSetExitIndicator(extind)"""
    return _cfgmcc.cfgSetExitIndicator(extind)

def cfgGetErrorCallback():
    """cfgGetErrorCallback() -> cfgErrorCallback_t"""
    return _cfgmcc.cfgGetErrorCallback()

def cfgSetErrorCallback(func):
    """cfgSetErrorCallback(func)"""
    return _cfgmcc.cfgSetErrorCallback(func)

def cfgGetAPIErrorCount():
    """cfgGetAPIErrorCount() -> int"""
    return _cfgmcc.cfgGetAPIErrorCount()

def cfgSetAPIErrorCount(ecnt):
    """cfgSetAPIErrorCount(ecnt)"""
    return _cfgmcc.cfgSetAPIErrorCount(ecnt)

def cfgErrorHandling(msg):
    """cfgErrorHandling(msg)"""
    return _cfgmcc.cfgErrorHandling(msg)

def cfgReadConfig(pcfg, filename):
    """cfgReadConfig(pcfg, filename) -> int"""
    return _cfgmcc.cfgReadConfig(pcfg, filename)

def cfgNumAlgs(pcfg):
    """cfgNumAlgs(pcfg) -> int"""
    return _cfgmcc.cfgNumAlgs(pcfg)

def cfgDefaultAlg(pcfg, proc):
    """cfgDefaultAlg(pcfg, proc) -> int"""
    return _cfgmcc.cfgDefaultAlg(pcfg, proc)

def cfgAlgName(pcfg, alg):
    """cfgAlgName(pcfg, alg) -> char *"""
    return _cfgmcc.cfgAlgName(pcfg, alg)

def cfgAlgCode(pcfg, alg):
    """cfgAlgCode(pcfg, alg) -> char *"""
    return _cfgmcc.cfgAlgCode(pcfg, alg)

def cfgAlgHidden(pcfg, alg):
    """cfgAlgHidden(pcfg, alg) -> int"""
    return _cfgmcc.cfgAlgHidden(pcfg, alg)

def cfgAlgAllowsModifyProblem(pcfg, alg):
    """cfgAlgAllowsModifyProblem(pcfg, alg) -> int"""
    return _cfgmcc.cfgAlgAllowsModifyProblem(pcfg, alg)

def cfgAlgLibInfo(pcfg, alg):
    """cfgAlgLibInfo(pcfg, alg) -> int"""
    return _cfgmcc.cfgAlgLibInfo(pcfg, alg)

def cfgAlgThreadSafeIndic(pcfg, alg):
    """cfgAlgThreadSafeIndic(pcfg, alg) -> int"""
    return _cfgmcc.cfgAlgThreadSafeIndic(pcfg, alg)

def cfgAlgNumber(pcfg, id):
    """cfgAlgNumber(pcfg, id) -> int"""
    return _cfgmcc.cfgAlgNumber(pcfg, id)

def cfgAlgCapability(pcfg, alg, proc):
    """cfgAlgCapability(pcfg, alg, proc) -> int"""
    return _cfgmcc.cfgAlgCapability(pcfg, alg, proc)

def cfgAlgCreate(pcfg, alg, psl, sysDir):
    """cfgAlgCreate(pcfg, alg, psl, sysDir) -> int"""
    return _cfgmcc.cfgAlgCreate(pcfg, alg, psl, sysDir)

def cfgAlgReadyAPI(pcfg, alg, psl, gmo, opt):
    """cfgAlgReadyAPI(pcfg, alg, psl, gmo, opt) -> int"""
    return _cfgmcc.cfgAlgReadyAPI(pcfg, alg, psl, gmo, opt)

def cfgAlgModifyProblem(pcfg, alg, psl):
    """cfgAlgModifyProblem(pcfg, alg, psl) -> int"""
    return _cfgmcc.cfgAlgModifyProblem(pcfg, alg, psl)

def cfgAlgCallSolver(pcfg, alg, psl, gmo):
    """cfgAlgCallSolver(pcfg, alg, psl, gmo) -> int"""
    return _cfgmcc.cfgAlgCallSolver(pcfg, alg, psl, gmo)

def cfgAlgFree(pcfg, alg, vpsl):
    """cfgAlgFree(pcfg, alg, vpsl)"""
    return _cfgmcc.cfgAlgFree(pcfg, alg, vpsl)

def cfgModelTypeName(pcfg, proc):
    """cfgModelTypeName(pcfg, proc) -> char *"""
    return _cfgmcc.cfgModelTypeName(pcfg, proc)

def cfgModelTypeNumber(pcfg, id):
    """cfgModelTypeNumber(pcfg, id) -> int"""
    return _cfgmcc.cfgModelTypeNumber(pcfg, id)

def cfgNumMsg(pcfg):
    """cfgNumMsg(pcfg) -> int"""
    return _cfgmcc.cfgNumMsg(pcfg)

def cfgGetMsg(pcfg):
    """cfgGetMsg(pcfg) -> char *"""
    return _cfgmcc.cfgGetMsg(pcfg)
GLOBAL_MAX_INDEX_DIM = _cfgmcc.GLOBAL_MAX_INDEX_DIM
GLOBAL_UEL_IDENT_SIZE = _cfgmcc.GLOBAL_UEL_IDENT_SIZE
ITERLIM_INFINITY = _cfgmcc.ITERLIM_INFINITY
GMS_MAX_INDEX_DIM = _cfgmcc.GMS_MAX_INDEX_DIM
GMS_UEL_IDENT_SIZE = _cfgmcc.GMS_UEL_IDENT_SIZE
GMS_SSSIZE = _cfgmcc.GMS_SSSIZE
GMS_VARTYPE_UNKNOWN = _cfgmcc.GMS_VARTYPE_UNKNOWN
GMS_VARTYPE_BINARY = _cfgmcc.GMS_VARTYPE_BINARY
GMS_VARTYPE_INTEGER = _cfgmcc.GMS_VARTYPE_INTEGER
GMS_VARTYPE_POSITIVE = _cfgmcc.GMS_VARTYPE_POSITIVE
GMS_VARTYPE_NEGATIVE = _cfgmcc.GMS_VARTYPE_NEGATIVE
GMS_VARTYPE_FREE = _cfgmcc.GMS_VARTYPE_FREE
GMS_VARTYPE_SOS1 = _cfgmcc.GMS_VARTYPE_SOS1
GMS_VARTYPE_SOS2 = _cfgmcc.GMS_VARTYPE_SOS2
GMS_VARTYPE_SEMICONT = _cfgmcc.GMS_VARTYPE_SEMICONT
GMS_VARTYPE_SEMIINT = _cfgmcc.GMS_VARTYPE_SEMIINT
GMS_VARTYPE_MAX = _cfgmcc.GMS_VARTYPE_MAX
GMS_EQUTYPE_E = _cfgmcc.GMS_EQUTYPE_E
GMS_EQUTYPE_G = _cfgmcc.GMS_EQUTYPE_G
GMS_EQUTYPE_L = _cfgmcc.GMS_EQUTYPE_L
GMS_EQUTYPE_N = _cfgmcc.GMS_EQUTYPE_N
GMS_EQUTYPE_X = _cfgmcc.GMS_EQUTYPE_X
GMS_EQUTYPE_C = _cfgmcc.GMS_EQUTYPE_C
GMS_EQUTYPE_MAX = _cfgmcc.GMS_EQUTYPE_MAX
GMS_VAL_LEVEL = _cfgmcc.GMS_VAL_LEVEL
GMS_VAL_MARGINAL = _cfgmcc.GMS_VAL_MARGINAL
GMS_VAL_LOWER = _cfgmcc.GMS_VAL_LOWER
GMS_VAL_UPPER = _cfgmcc.GMS_VAL_UPPER
GMS_VAL_SCALE = _cfgmcc.GMS_VAL_SCALE
GMS_VAL_MAX = _cfgmcc.GMS_VAL_MAX
sv_valund = _cfgmcc.sv_valund
sv_valna = _cfgmcc.sv_valna
sv_valpin = _cfgmcc.sv_valpin
sv_valmin = _cfgmcc.sv_valmin
sv_valeps = _cfgmcc.sv_valeps
sv_normal = _cfgmcc.sv_normal
sv_acronym = _cfgmcc.sv_acronym
GMS_SVIDX_UNDEF = _cfgmcc.GMS_SVIDX_UNDEF
GMS_SVIDX_NA = _cfgmcc.GMS_SVIDX_NA
GMS_SVIDX_PINF = _cfgmcc.GMS_SVIDX_PINF
GMS_SVIDX_MINF = _cfgmcc.GMS_SVIDX_MINF
GMS_SVIDX_EPS = _cfgmcc.GMS_SVIDX_EPS
GMS_SVIDX_NORMAL = _cfgmcc.GMS_SVIDX_NORMAL
GMS_SVIDX_ACR = _cfgmcc.GMS_SVIDX_ACR
GMS_SVIDX_MAX = _cfgmcc.GMS_SVIDX_MAX
dt_set = _cfgmcc.dt_set
dt_par = _cfgmcc.dt_par
dt_var = _cfgmcc.dt_var
dt_equ = _cfgmcc.dt_equ
dt_alias = _cfgmcc.dt_alias
GMS_DT_SET = _cfgmcc.GMS_DT_SET
GMS_DT_PAR = _cfgmcc.GMS_DT_PAR
GMS_DT_VAR = _cfgmcc.GMS_DT_VAR
GMS_DT_EQU = _cfgmcc.GMS_DT_EQU
GMS_DT_ALIAS = _cfgmcc.GMS_DT_ALIAS
GMS_DT_MAX = _cfgmcc.GMS_DT_MAX
GMS_SV_UNDEF = _cfgmcc.GMS_SV_UNDEF
GMS_SV_NA = _cfgmcc.GMS_SV_NA
GMS_SV_PINF = _cfgmcc.GMS_SV_PINF
GMS_SV_MINF = _cfgmcc.GMS_SV_MINF
GMS_SV_EPS = _cfgmcc.GMS_SV_EPS
GMS_SV_ACR = _cfgmcc.GMS_SV_ACR
GMS_SV_NAINT = _cfgmcc.GMS_SV_NAINT
# This file is compatible with both classic and new-style classes.


