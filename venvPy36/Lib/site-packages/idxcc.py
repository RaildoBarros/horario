# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_idxcc')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_idxcc')
    _idxcc = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_idxcc', [dirname(__file__)])
        except ImportError:
            import _idxcc
            return _idxcc
        try:
            _mod = imp.load_module('_idxcc', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _idxcc = swig_import_helper()
    del swig_import_helper
else:
    import _idxcc
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _idxcc.new_intArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _idxcc.delete_intArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _idxcc.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _idxcc.intArray___setitem__(self, index, value)

    def cast(self):
        return _idxcc.intArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_idxcc.intArray_frompointer)
    else:
        frompointer = _idxcc.intArray_frompointer
intArray_swigregister = _idxcc.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(t):
    return _idxcc.intArray_frompointer(t)
intArray_frompointer = _idxcc.intArray_frompointer

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _idxcc.new_doubleArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _idxcc.delete_doubleArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _idxcc.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _idxcc.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _idxcc.doubleArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_idxcc.doubleArray_frompointer)
    else:
        frompointer = _idxcc.doubleArray_frompointer
doubleArray_swigregister = _idxcc.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t):
    return _idxcc.doubleArray_frompointer(t)
doubleArray_frompointer = _idxcc.doubleArray_frompointer


def new_intp():
    return _idxcc.new_intp()
new_intp = _idxcc.new_intp

def copy_intp(value):
    return _idxcc.copy_intp(value)
copy_intp = _idxcc.copy_intp

def delete_intp(obj):
    return _idxcc.delete_intp(obj)
delete_intp = _idxcc.delete_intp

def intp_assign(obj, value):
    return _idxcc.intp_assign(obj, value)
intp_assign = _idxcc.intp_assign

def intp_value(obj):
    return _idxcc.intp_value(obj)
intp_value = _idxcc.intp_value

def new_doublep():
    return _idxcc.new_doublep()
new_doublep = _idxcc.new_doublep

def copy_doublep(value):
    return _idxcc.copy_doublep(value)
copy_doublep = _idxcc.copy_doublep

def delete_doublep(obj):
    return _idxcc.delete_doublep(obj)
delete_doublep = _idxcc.delete_doublep

def doublep_assign(obj, value):
    return _idxcc.doublep_assign(obj, value)
doublep_assign = _idxcc.doublep_assign

def doublep_value(obj):
    return _idxcc.doublep_value(obj)
doublep_value = _idxcc.doublep_value

def new_idxHandle_tp():
    return _idxcc.new_idxHandle_tp()
new_idxHandle_tp = _idxcc.new_idxHandle_tp

def copy_idxHandle_tp(value):
    return _idxcc.copy_idxHandle_tp(value)
copy_idxHandle_tp = _idxcc.copy_idxHandle_tp

def delete_idxHandle_tp(obj):
    return _idxcc.delete_idxHandle_tp(obj)
delete_idxHandle_tp = _idxcc.delete_idxHandle_tp

def idxHandle_tp_assign(obj, value):
    return _idxcc.idxHandle_tp_assign(obj, value)
idxHandle_tp_assign = _idxcc.idxHandle_tp_assign

def idxHandle_tp_value(obj):
    return _idxcc.idxHandle_tp_value(obj)
idxHandle_tp_value = _idxcc.idxHandle_tp_value

def idxHandleToPtr(pidx):
    """idxHandleToPtr(pidx) -> void *"""
    return _idxcc.idxHandleToPtr(pidx)

def ptrToidxHandle(vptr):
    """ptrToidxHandle(vptr) -> idxHandle_t"""
    return _idxcc.ptrToidxHandle(vptr)

def idxGetReady(msgBufSize):
    """idxGetReady(msgBufSize) -> int"""
    return _idxcc.idxGetReady(msgBufSize)

def idxGetReadyD(dirName, msgBufSize):
    """idxGetReadyD(dirName, msgBufSize) -> int"""
    return _idxcc.idxGetReadyD(dirName, msgBufSize)

def idxGetReadyL(libName, msgBufSize):
    """idxGetReadyL(libName, msgBufSize) -> int"""
    return _idxcc.idxGetReadyL(libName, msgBufSize)

def idxCreate(pidx, msgBufSize):
    """idxCreate(pidx, msgBufSize) -> int"""
    return _idxcc.idxCreate(pidx, msgBufSize)

def idxCreateD(pidx, dirName, msgBufSize):
    """idxCreateD(pidx, dirName, msgBufSize) -> int"""
    return _idxcc.idxCreateD(pidx, dirName, msgBufSize)

def idxCreateL(pidx, libName, msgBufSize):
    """idxCreateL(pidx, libName, msgBufSize) -> int"""
    return _idxcc.idxCreateL(pidx, libName, msgBufSize)

def idxFree(pidx):
    """idxFree(pidx) -> int"""
    return _idxcc.idxFree(pidx)

def idxLibraryLoaded():
    """idxLibraryLoaded() -> int"""
    return _idxcc.idxLibraryLoaded()

def idxLibraryUnload():
    """idxLibraryUnload() -> int"""
    return _idxcc.idxLibraryUnload()

def idxGetScreenIndicator():
    """idxGetScreenIndicator() -> int"""
    return _idxcc.idxGetScreenIndicator()

def idxSetScreenIndicator(scrind):
    """idxSetScreenIndicator(scrind)"""
    return _idxcc.idxSetScreenIndicator(scrind)

def idxGetExceptionIndicator():
    """idxGetExceptionIndicator() -> int"""
    return _idxcc.idxGetExceptionIndicator()

def idxSetExceptionIndicator(excind):
    """idxSetExceptionIndicator(excind)"""
    return _idxcc.idxSetExceptionIndicator(excind)

def idxGetExitIndicator():
    """idxGetExitIndicator() -> int"""
    return _idxcc.idxGetExitIndicator()

def idxSetExitIndicator(extind):
    """idxSetExitIndicator(extind)"""
    return _idxcc.idxSetExitIndicator(extind)

def idxGetErrorCallback():
    """idxGetErrorCallback() -> idxErrorCallback_t"""
    return _idxcc.idxGetErrorCallback()

def idxSetErrorCallback(func):
    """idxSetErrorCallback(func)"""
    return _idxcc.idxSetErrorCallback(func)

def idxGetAPIErrorCount():
    """idxGetAPIErrorCount() -> int"""
    return _idxcc.idxGetAPIErrorCount()

def idxSetAPIErrorCount(ecnt):
    """idxSetAPIErrorCount(ecnt)"""
    return _idxcc.idxSetAPIErrorCount(ecnt)

def idxErrorHandling(msg):
    """idxErrorHandling(msg)"""
    return _idxcc.idxErrorHandling(msg)

def idxGetLastError(pidx):
    """idxGetLastError(pidx) -> int"""
    return _idxcc.idxGetLastError(pidx)

def idxErrorStr(pidx, ErrNr, ErrMsg_i):
    """idxErrorStr(pidx, ErrNr, ErrMsg_i)"""
    return _idxcc.idxErrorStr(pidx, ErrNr, ErrMsg_i)

def idxOpenRead(pidx, FileName):
    """idxOpenRead(pidx, FileName) -> int"""
    return _idxcc.idxOpenRead(pidx, FileName)

def idxOpenWrite(pidx, FileName, Producer):
    """idxOpenWrite(pidx, FileName, Producer) -> int"""
    return _idxcc.idxOpenWrite(pidx, FileName, Producer)

def idxClose(pidx):
    """idxClose(pidx) -> int"""
    return _idxcc.idxClose(pidx)

def idxGetSymCount(pidx):
    """idxGetSymCount(pidx) -> int"""
    return _idxcc.idxGetSymCount(pidx)

def idxGetSymbolInfo(pidx, iSym, symName_i, explText_i):
    """idxGetSymbolInfo(pidx, iSym, symName_i, explText_i) -> int"""
    return _idxcc.idxGetSymbolInfo(pidx, iSym, symName_i, explText_i)

def idxGetSymbolInfoByName(pidx, symName, explText_i):
    """idxGetSymbolInfoByName(pidx, symName, explText_i) -> int"""
    return _idxcc.idxGetSymbolInfoByName(pidx, symName, explText_i)

def idxGetIndexBase(pidx):
    """idxGetIndexBase(pidx) -> int"""
    return _idxcc.idxGetIndexBase(pidx)

def idxSetIndexBase(pidx, idxBase):
    """idxSetIndexBase(pidx, idxBase) -> int"""
    return _idxcc.idxSetIndexBase(pidx, idxBase)

def idxDataReadStart(pidx, symName, ErrMsg_i):
    """idxDataReadStart(pidx, symName, ErrMsg_i) -> int"""
    return _idxcc.idxDataReadStart(pidx, symName, ErrMsg_i)

def idxDataRead(pidx):
    """idxDataRead(pidx) -> int"""
    return _idxcc.idxDataRead(pidx)

def idxDataReadDone(pidx):
    """idxDataReadDone(pidx) -> int"""
    return _idxcc.idxDataReadDone(pidx)

def idxDataReadSparseColMajor(pidx, idxBase, colPtr, rowIdx, vals):
    """idxDataReadSparseColMajor(pidx, idxBase, colPtr, rowIdx, vals) -> int"""
    return _idxcc.idxDataReadSparseColMajor(pidx, idxBase, colPtr, rowIdx, vals)

def idxDataReadSparseRowMajor(pidx, idxBase, rowPtr, colIdx, vals):
    """idxDataReadSparseRowMajor(pidx, idxBase, rowPtr, colIdx, vals) -> int"""
    return _idxcc.idxDataReadSparseRowMajor(pidx, idxBase, rowPtr, colIdx, vals)

def idxDataReadDenseColMajor(pidx, vals):
    """idxDataReadDenseColMajor(pidx, vals) -> int"""
    return _idxcc.idxDataReadDenseColMajor(pidx, vals)

def idxDataReadDenseRowMajor(pidx, vals):
    """idxDataReadDenseRowMajor(pidx, vals) -> int"""
    return _idxcc.idxDataReadDenseRowMajor(pidx, vals)

def idxDataWriteStart(pidx, symName, explTxt, symDim, dims, ErrMsg_i):
    """idxDataWriteStart(pidx, symName, explTxt, symDim, dims, ErrMsg_i) -> int"""
    return _idxcc.idxDataWriteStart(pidx, symName, explTxt, symDim, dims, ErrMsg_i)

def idxDataWrite(pidx, keys, val):
    """idxDataWrite(pidx, keys, val) -> int"""
    return _idxcc.idxDataWrite(pidx, keys, val)

def idxDataWriteDone(pidx):
    """idxDataWriteDone(pidx) -> int"""
    return _idxcc.idxDataWriteDone(pidx)

def idxDataWriteSparseColMajor(pidx, colPtr, rowIdx, vals):
    """idxDataWriteSparseColMajor(pidx, colPtr, rowIdx, vals) -> int"""
    return _idxcc.idxDataWriteSparseColMajor(pidx, colPtr, rowIdx, vals)

def idxDataWriteSparseRowMajor(pidx, rowPtr, colIdx, vals):
    """idxDataWriteSparseRowMajor(pidx, rowPtr, colIdx, vals) -> int"""
    return _idxcc.idxDataWriteSparseRowMajor(pidx, rowPtr, colIdx, vals)

def idxDataWriteDenseColMajor(pidx, dataDim, vals):
    """idxDataWriteDenseColMajor(pidx, dataDim, vals) -> int"""
    return _idxcc.idxDataWriteDenseColMajor(pidx, dataDim, vals)

def idxDataWriteDenseRowMajor(pidx, dataDim, vals):
    """idxDataWriteDenseRowMajor(pidx, dataDim, vals) -> int"""
    return _idxcc.idxDataWriteDenseRowMajor(pidx, dataDim, vals)
GLOBAL_MAX_INDEX_DIM = _idxcc.GLOBAL_MAX_INDEX_DIM
GLOBAL_UEL_IDENT_SIZE = _idxcc.GLOBAL_UEL_IDENT_SIZE
ITERLIM_INFINITY = _idxcc.ITERLIM_INFINITY
GMS_MAX_INDEX_DIM = _idxcc.GMS_MAX_INDEX_DIM
GMS_UEL_IDENT_SIZE = _idxcc.GMS_UEL_IDENT_SIZE
GMS_SSSIZE = _idxcc.GMS_SSSIZE
GMS_VARTYPE_UNKNOWN = _idxcc.GMS_VARTYPE_UNKNOWN
GMS_VARTYPE_BINARY = _idxcc.GMS_VARTYPE_BINARY
GMS_VARTYPE_INTEGER = _idxcc.GMS_VARTYPE_INTEGER
GMS_VARTYPE_POSITIVE = _idxcc.GMS_VARTYPE_POSITIVE
GMS_VARTYPE_NEGATIVE = _idxcc.GMS_VARTYPE_NEGATIVE
GMS_VARTYPE_FREE = _idxcc.GMS_VARTYPE_FREE
GMS_VARTYPE_SOS1 = _idxcc.GMS_VARTYPE_SOS1
GMS_VARTYPE_SOS2 = _idxcc.GMS_VARTYPE_SOS2
GMS_VARTYPE_SEMICONT = _idxcc.GMS_VARTYPE_SEMICONT
GMS_VARTYPE_SEMIINT = _idxcc.GMS_VARTYPE_SEMIINT
GMS_VARTYPE_MAX = _idxcc.GMS_VARTYPE_MAX
GMS_EQUTYPE_E = _idxcc.GMS_EQUTYPE_E
GMS_EQUTYPE_G = _idxcc.GMS_EQUTYPE_G
GMS_EQUTYPE_L = _idxcc.GMS_EQUTYPE_L
GMS_EQUTYPE_N = _idxcc.GMS_EQUTYPE_N
GMS_EQUTYPE_X = _idxcc.GMS_EQUTYPE_X
GMS_EQUTYPE_C = _idxcc.GMS_EQUTYPE_C
GMS_EQUTYPE_MAX = _idxcc.GMS_EQUTYPE_MAX
GMS_VAL_LEVEL = _idxcc.GMS_VAL_LEVEL
GMS_VAL_MARGINAL = _idxcc.GMS_VAL_MARGINAL
GMS_VAL_LOWER = _idxcc.GMS_VAL_LOWER
GMS_VAL_UPPER = _idxcc.GMS_VAL_UPPER
GMS_VAL_SCALE = _idxcc.GMS_VAL_SCALE
GMS_VAL_MAX = _idxcc.GMS_VAL_MAX
sv_valund = _idxcc.sv_valund
sv_valna = _idxcc.sv_valna
sv_valpin = _idxcc.sv_valpin
sv_valmin = _idxcc.sv_valmin
sv_valeps = _idxcc.sv_valeps
sv_normal = _idxcc.sv_normal
sv_acronym = _idxcc.sv_acronym
GMS_SVIDX_UNDEF = _idxcc.GMS_SVIDX_UNDEF
GMS_SVIDX_NA = _idxcc.GMS_SVIDX_NA
GMS_SVIDX_PINF = _idxcc.GMS_SVIDX_PINF
GMS_SVIDX_MINF = _idxcc.GMS_SVIDX_MINF
GMS_SVIDX_EPS = _idxcc.GMS_SVIDX_EPS
GMS_SVIDX_NORMAL = _idxcc.GMS_SVIDX_NORMAL
GMS_SVIDX_ACR = _idxcc.GMS_SVIDX_ACR
GMS_SVIDX_MAX = _idxcc.GMS_SVIDX_MAX
dt_set = _idxcc.dt_set
dt_par = _idxcc.dt_par
dt_var = _idxcc.dt_var
dt_equ = _idxcc.dt_equ
dt_alias = _idxcc.dt_alias
GMS_DT_SET = _idxcc.GMS_DT_SET
GMS_DT_PAR = _idxcc.GMS_DT_PAR
GMS_DT_VAR = _idxcc.GMS_DT_VAR
GMS_DT_EQU = _idxcc.GMS_DT_EQU
GMS_DT_ALIAS = _idxcc.GMS_DT_ALIAS
GMS_DT_MAX = _idxcc.GMS_DT_MAX
GMS_SV_UNDEF = _idxcc.GMS_SV_UNDEF
GMS_SV_NA = _idxcc.GMS_SV_NA
GMS_SV_PINF = _idxcc.GMS_SV_PINF
GMS_SV_MINF = _idxcc.GMS_SV_MINF
GMS_SV_EPS = _idxcc.GMS_SV_EPS
GMS_SV_ACR = _idxcc.GMS_SV_ACR
GMS_SV_NAINT = _idxcc.GMS_SV_NAINT
# This file is compatible with both classic and new-style classes.


