# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_gevmcc')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_gevmcc')
    _gevmcc = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gevmcc', [dirname(__file__)])
        except ImportError:
            import _gevmcc
            return _gevmcc
        try:
            _mod = imp.load_module('_gevmcc', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _gevmcc = swig_import_helper()
    del swig_import_helper
else:
    import _gevmcc
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

gevdoErr = _gevmcc.gevdoErr
gevdoStat = _gevmcc.gevdoStat
gevdoLog = _gevmcc.gevdoLog
gevSolverSameStreams = _gevmcc.gevSolverSameStreams
gevSolverQuiet = _gevmcc.gevSolverQuiet
gevSolverOwnFile = _gevmcc.gevSolverOwnFile
gevSolveLinkCallScript = _gevmcc.gevSolveLinkCallScript
gevSolveLinkCallModule = _gevmcc.gevSolveLinkCallModule
gevSolveLinkAsyncGrid = _gevmcc.gevSolveLinkAsyncGrid
gevSolveLinkAsyncSimulate = _gevmcc.gevSolveLinkAsyncSimulate
gevSolveLinkLoadLibrary = _gevmcc.gevSolveLinkLoadLibrary
gevAlgFileType = _gevmcc.gevAlgFileType
gevGamsVersion = _gevmcc.gevGamsVersion
gevLogOption = _gevmcc.gevLogOption
gevReform = _gevmcc.gevReform
gevIDEFlag = _gevmcc.gevIDEFlag
gevDomLim = _gevmcc.gevDomLim
gevIterLim = _gevmcc.gevIterLim
gevNodeLim = _gevmcc.gevNodeLim
gevSysOut = _gevmcc.gevSysOut
gevInteger1 = _gevmcc.gevInteger1
gevInteger2 = _gevmcc.gevInteger2
gevInteger3 = _gevmcc.gevInteger3
gevInteger4 = _gevmcc.gevInteger4
gevInteger5 = _gevmcc.gevInteger5
gevGenSolver = _gevmcc.gevGenSolver
gevCurSolver = _gevmcc.gevCurSolver
gevPageWidth = _gevmcc.gevPageWidth
gevPageSize = _gevmcc.gevPageSize
gevKeep = _gevmcc.gevKeep
gevThreadsRaw = _gevmcc.gevThreadsRaw
gevFDOpt = _gevmcc.gevFDOpt
gevOptCR = _gevmcc.gevOptCR
gevOptCA = _gevmcc.gevOptCA
gevResLim = _gevmcc.gevResLim
gevWorkSpace = _gevmcc.gevWorkSpace
gevWorkFactor = _gevmcc.gevWorkFactor
gevCutOff = _gevmcc.gevCutOff
gevUseCutOff = _gevmcc.gevUseCutOff
gevCheat = _gevmcc.gevCheat
gevUseCheat = _gevmcc.gevUseCheat
gevTryInt = _gevmcc.gevTryInt
gevReal1 = _gevmcc.gevReal1
gevReal2 = _gevmcc.gevReal2
gevReal3 = _gevmcc.gevReal3
gevReal4 = _gevmcc.gevReal4
gevReal5 = _gevmcc.gevReal5
gevHeapLimit = _gevmcc.gevHeapLimit
gevFDDelta = _gevmcc.gevFDDelta
gevNameCtrFile = _gevmcc.gevNameCtrFile
gevNameLogFile = _gevmcc.gevNameLogFile
gevNameStaFile = _gevmcc.gevNameStaFile
gevNameScrDir = _gevmcc.gevNameScrDir
gevNameGamsDate = _gevmcc.gevNameGamsDate
gevNameGamsTime = _gevmcc.gevNameGamsTime
gevNameSysDir = _gevmcc.gevNameSysDir
gevNameWrkDir = _gevmcc.gevNameWrkDir
gevNameCurDir = _gevmcc.gevNameCurDir
gevLicense1 = _gevmcc.gevLicense1
gevLicense2 = _gevmcc.gevLicense2
gevLicense3 = _gevmcc.gevLicense3
gevLicense4 = _gevmcc.gevLicense4
gevLicense5 = _gevmcc.gevLicense5
gevNameMatrix = _gevmcc.gevNameMatrix
gevNameInstr = _gevmcc.gevNameInstr
gevNameParams = _gevmcc.gevNameParams
gevNameScrExt = _gevmcc.gevNameScrExt
gevNameScenFile = _gevmcc.gevNameScenFile
gevNameExtFFile = _gevmcc.gevNameExtFFile
class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _gevmcc.new_intArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gevmcc.delete_intArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _gevmcc.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _gevmcc.intArray___setitem__(self, index, value)

    def cast(self):
        return _gevmcc.intArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_gevmcc.intArray_frompointer)
    else:
        frompointer = _gevmcc.intArray_frompointer
intArray_swigregister = _gevmcc.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(t):
    return _gevmcc.intArray_frompointer(t)
intArray_frompointer = _gevmcc.intArray_frompointer

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _gevmcc.new_doubleArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gevmcc.delete_doubleArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _gevmcc.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _gevmcc.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _gevmcc.doubleArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_gevmcc.doubleArray_frompointer)
    else:
        frompointer = _gevmcc.doubleArray_frompointer
doubleArray_swigregister = _gevmcc.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t):
    return _gevmcc.doubleArray_frompointer(t)
doubleArray_frompointer = _gevmcc.doubleArray_frompointer


def new_intp():
    return _gevmcc.new_intp()
new_intp = _gevmcc.new_intp

def copy_intp(value):
    return _gevmcc.copy_intp(value)
copy_intp = _gevmcc.copy_intp

def delete_intp(obj):
    return _gevmcc.delete_intp(obj)
delete_intp = _gevmcc.delete_intp

def intp_assign(obj, value):
    return _gevmcc.intp_assign(obj, value)
intp_assign = _gevmcc.intp_assign

def intp_value(obj):
    return _gevmcc.intp_value(obj)
intp_value = _gevmcc.intp_value

def new_doublep():
    return _gevmcc.new_doublep()
new_doublep = _gevmcc.new_doublep

def copy_doublep(value):
    return _gevmcc.copy_doublep(value)
copy_doublep = _gevmcc.copy_doublep

def delete_doublep(obj):
    return _gevmcc.delete_doublep(obj)
delete_doublep = _gevmcc.delete_doublep

def doublep_assign(obj, value):
    return _gevmcc.doublep_assign(obj, value)
doublep_assign = _gevmcc.doublep_assign

def doublep_value(obj):
    return _gevmcc.doublep_value(obj)
doublep_value = _gevmcc.doublep_value

def new_gevHandle_tp():
    return _gevmcc.new_gevHandle_tp()
new_gevHandle_tp = _gevmcc.new_gevHandle_tp

def copy_gevHandle_tp(value):
    return _gevmcc.copy_gevHandle_tp(value)
copy_gevHandle_tp = _gevmcc.copy_gevHandle_tp

def delete_gevHandle_tp(obj):
    return _gevmcc.delete_gevHandle_tp(obj)
delete_gevHandle_tp = _gevmcc.delete_gevHandle_tp

def gevHandle_tp_assign(obj, value):
    return _gevmcc.gevHandle_tp_assign(obj, value)
gevHandle_tp_assign = _gevmcc.gevHandle_tp_assign

def gevHandle_tp_value(obj):
    return _gevmcc.gevHandle_tp_value(obj)
gevHandle_tp_value = _gevmcc.gevHandle_tp_value

def new_Tgevlswrite_tp():
    return _gevmcc.new_Tgevlswrite_tp()
new_Tgevlswrite_tp = _gevmcc.new_Tgevlswrite_tp

def copy_Tgevlswrite_tp(value):
    return _gevmcc.copy_Tgevlswrite_tp(value)
copy_Tgevlswrite_tp = _gevmcc.copy_Tgevlswrite_tp

def delete_Tgevlswrite_tp(obj):
    return _gevmcc.delete_Tgevlswrite_tp(obj)
delete_Tgevlswrite_tp = _gevmcc.delete_Tgevlswrite_tp

def Tgevlswrite_tp_assign(obj, value):
    return _gevmcc.Tgevlswrite_tp_assign(obj, value)
Tgevlswrite_tp_assign = _gevmcc.Tgevlswrite_tp_assign

def Tgevlswrite_tp_value(obj):
    return _gevmcc.Tgevlswrite_tp_value(obj)
Tgevlswrite_tp_value = _gevmcc.Tgevlswrite_tp_value

def gevHandleToPtr(pgev):
    """gevHandleToPtr(pgev) -> void *"""
    return _gevmcc.gevHandleToPtr(pgev)

def ptrTogevHandle(vptr):
    """ptrTogevHandle(vptr) -> gevHandle_t"""
    return _gevmcc.ptrTogevHandle(vptr)

def gevGetReady(msgBufSize):
    """gevGetReady(msgBufSize) -> int"""
    return _gevmcc.gevGetReady(msgBufSize)

def gevGetReadyD(dirName, msgBufSize):
    """gevGetReadyD(dirName, msgBufSize) -> int"""
    return _gevmcc.gevGetReadyD(dirName, msgBufSize)

def gevGetReadyL(libName, msgBufSize):
    """gevGetReadyL(libName, msgBufSize) -> int"""
    return _gevmcc.gevGetReadyL(libName, msgBufSize)

def gevCreate(pgev, msgBufSize):
    """gevCreate(pgev, msgBufSize) -> int"""
    return _gevmcc.gevCreate(pgev, msgBufSize)

def gevCreateD(pgev, dirName, msgBufSize):
    """gevCreateD(pgev, dirName, msgBufSize) -> int"""
    return _gevmcc.gevCreateD(pgev, dirName, msgBufSize)

def gevCreateDD(pgev, dirName, msgBufSize):
    """gevCreateDD(pgev, dirName, msgBufSize) -> int"""
    return _gevmcc.gevCreateDD(pgev, dirName, msgBufSize)

def gevCreateL(pgev, libName, msgBufSize):
    """gevCreateL(pgev, libName, msgBufSize) -> int"""
    return _gevmcc.gevCreateL(pgev, libName, msgBufSize)

def gevFree(pgev):
    """gevFree(pgev) -> int"""
    return _gevmcc.gevFree(pgev)

def gevLibraryLoaded():
    """gevLibraryLoaded() -> int"""
    return _gevmcc.gevLibraryLoaded()

def gevLibraryUnload():
    """gevLibraryUnload() -> int"""
    return _gevmcc.gevLibraryUnload()

def gevGetScreenIndicator():
    """gevGetScreenIndicator() -> int"""
    return _gevmcc.gevGetScreenIndicator()

def gevSetScreenIndicator(scrind):
    """gevSetScreenIndicator(scrind)"""
    return _gevmcc.gevSetScreenIndicator(scrind)

def gevGetExceptionIndicator():
    """gevGetExceptionIndicator() -> int"""
    return _gevmcc.gevGetExceptionIndicator()

def gevSetExceptionIndicator(excind):
    """gevSetExceptionIndicator(excind)"""
    return _gevmcc.gevSetExceptionIndicator(excind)

def gevGetExitIndicator():
    """gevGetExitIndicator() -> int"""
    return _gevmcc.gevGetExitIndicator()

def gevSetExitIndicator(extind):
    """gevSetExitIndicator(extind)"""
    return _gevmcc.gevSetExitIndicator(extind)

def gevGetErrorCallback():
    """gevGetErrorCallback() -> gevErrorCallback_t"""
    return _gevmcc.gevGetErrorCallback()

def gevSetErrorCallback(func):
    """gevSetErrorCallback(func)"""
    return _gevmcc.gevSetErrorCallback(func)

def gevGetAPIErrorCount():
    """gevGetAPIErrorCount() -> int"""
    return _gevmcc.gevGetAPIErrorCount()

def gevSetAPIErrorCount(ecnt):
    """gevSetAPIErrorCount(ecnt)"""
    return _gevmcc.gevSetAPIErrorCount(ecnt)

def gevErrorHandling(msg):
    """gevErrorHandling(msg)"""
    return _gevmcc.gevErrorHandling(msg)

def gevRegisterWriteCallback(pgev, lsw, logenabled, usrmem):
    """gevRegisterWriteCallback(pgev, lsw, logenabled, usrmem)"""
    return _gevmcc.gevRegisterWriteCallback(pgev, lsw, logenabled, usrmem)

def gevCompleteEnvironment(pgev, palg, ivec, rvec, svec):
    """gevCompleteEnvironment(pgev, palg, ivec, rvec, svec)"""
    return _gevmcc.gevCompleteEnvironment(pgev, palg, ivec, rvec, svec)

def gevInitEnvironmentLegacy(pgev, cntrfn):
    """gevInitEnvironmentLegacy(pgev, cntrfn) -> int"""
    return _gevmcc.gevInitEnvironmentLegacy(pgev, cntrfn)

def gevSwitchLogStat(pgev, lo, logfn, logappend, statfn, statappend, lsw, usrmem, lshandle):
    """gevSwitchLogStat(pgev, lo, logfn, logappend, statfn, statappend, lsw, usrmem, lshandle) -> int"""
    return _gevmcc.gevSwitchLogStat(pgev, lo, logfn, logappend, statfn, statappend, lsw, usrmem, lshandle)

def gevGetLShandle(pgev):
    """gevGetLShandle(pgev) -> void *"""
    return _gevmcc.gevGetLShandle(pgev)

def gevRestoreLogStat(pgev, lshandle):
    """gevRestoreLogStat(pgev, lshandle) -> int"""
    return _gevmcc.gevRestoreLogStat(pgev, lshandle)

def gevRestoreLogStatRewrite(pgev, lshandle):
    """gevRestoreLogStatRewrite(pgev, lshandle) -> int"""
    return _gevmcc.gevRestoreLogStatRewrite(pgev, lshandle)

def gevLog(pgev, s):
    """gevLog(pgev, s)"""
    return _gevmcc.gevLog(pgev, s)

def gevLogPChar(pgev, p):
    """gevLogPChar(pgev, p)"""
    return _gevmcc.gevLogPChar(pgev, p)

def gevStat(pgev, s):
    """gevStat(pgev, s)"""
    return _gevmcc.gevStat(pgev, s)

def gevStatC(pgev, s):
    """gevStatC(pgev, s)"""
    return _gevmcc.gevStatC(pgev, s)

def gevStatPChar(pgev, p):
    """gevStatPChar(pgev, p)"""
    return _gevmcc.gevStatPChar(pgev, p)

def gevStatAudit(pgev, s):
    """gevStatAudit(pgev, s)"""
    return _gevmcc.gevStatAudit(pgev, s)

def gevStatCon(pgev):
    """gevStatCon(pgev)"""
    return _gevmcc.gevStatCon(pgev)

def gevStatCoff(pgev):
    """gevStatCoff(pgev)"""
    return _gevmcc.gevStatCoff(pgev)

def gevStatEOF(pgev):
    """gevStatEOF(pgev)"""
    return _gevmcc.gevStatEOF(pgev)

def gevStatSysout(pgev):
    """gevStatSysout(pgev)"""
    return _gevmcc.gevStatSysout(pgev)

def gevStatAddE(pgev, mi, s):
    """gevStatAddE(pgev, mi, s)"""
    return _gevmcc.gevStatAddE(pgev, mi, s)

def gevStatAddV(pgev, mj, s):
    """gevStatAddV(pgev, mj, s)"""
    return _gevmcc.gevStatAddV(pgev, mj, s)

def gevStatAddJ(pgev, mi, mj, s):
    """gevStatAddJ(pgev, mi, mj, s)"""
    return _gevmcc.gevStatAddJ(pgev, mi, mj, s)

def gevStatEject(pgev):
    """gevStatEject(pgev)"""
    return _gevmcc.gevStatEject(pgev)

def gevStatEdit(pgev, C):
    """gevStatEdit(pgev, C)"""
    return _gevmcc.gevStatEdit(pgev, C)

def gevStatE(pgev, s, mi, s2):
    """gevStatE(pgev, s, mi, s2)"""
    return _gevmcc.gevStatE(pgev, s, mi, s2)

def gevStatV(pgev, s, mj, s2):
    """gevStatV(pgev, s, mj, s2)"""
    return _gevmcc.gevStatV(pgev, s, mj, s2)

def gevStatT(pgev):
    """gevStatT(pgev)"""
    return _gevmcc.gevStatT(pgev)

def gevStatA(pgev, s):
    """gevStatA(pgev, s)"""
    return _gevmcc.gevStatA(pgev, s)

def gevStatB(pgev, s):
    """gevStatB(pgev, s)"""
    return _gevmcc.gevStatB(pgev, s)

def gevLogStat(pgev, s):
    """gevLogStat(pgev, s)"""
    return _gevmcc.gevLogStat(pgev, s)

def gevLogStatNoC(pgev, s):
    """gevLogStatNoC(pgev, s)"""
    return _gevmcc.gevLogStatNoC(pgev, s)

def gevLogStatPChar(pgev, p):
    """gevLogStatPChar(pgev, p)"""
    return _gevmcc.gevLogStatPChar(pgev, p)

def gevLogStatFlush(pgev):
    """gevLogStatFlush(pgev)"""
    return _gevmcc.gevLogStatFlush(pgev)

def gevGetAnchor(pgev, s):
    """gevGetAnchor(pgev, s) -> char *"""
    return _gevmcc.gevGetAnchor(pgev, s)

def gevLSTAnchor(pgev, s):
    """gevLSTAnchor(pgev, s)"""
    return _gevmcc.gevLSTAnchor(pgev, s)

def gevStatAppend(pgev, statfn):
    """gevStatAppend(pgev, statfn) -> int"""
    return _gevmcc.gevStatAppend(pgev, statfn)

def gevMIPReport(pgev, gmoptr, fixobj, fixiter, agap, rgap):
    """gevMIPReport(pgev, gmoptr, fixobj, fixiter, agap, rgap)"""
    return _gevmcc.gevMIPReport(pgev, gmoptr, fixobj, fixiter, agap, rgap)

def gevGetSlvExeInfo(pgev, solvername):
    """gevGetSlvExeInfo(pgev, solvername) -> int"""
    return _gevmcc.gevGetSlvExeInfo(pgev, solvername)

def gevGetSlvLibInfo(pgev, solvername):
    """gevGetSlvLibInfo(pgev, solvername) -> int"""
    return _gevmcc.gevGetSlvLibInfo(pgev, solvername)

def gevCapabilityCheck(pgev, modeltype, solvername, capable):
    """gevCapabilityCheck(pgev, modeltype, solvername, capable) -> int"""
    return _gevmcc.gevCapabilityCheck(pgev, modeltype, solvername, capable)

def gevSolverVisibility(pgev, solvername, hidden, defaultok):
    """gevSolverVisibility(pgev, solvername, hidden, defaultok) -> int"""
    return _gevmcc.gevSolverVisibility(pgev, solvername, hidden, defaultok)

def gevNumSolvers(pgev):
    """gevNumSolvers(pgev) -> int"""
    return _gevmcc.gevNumSolvers(pgev)

def gevGetSolver(pgev, modeltype):
    """gevGetSolver(pgev, modeltype) -> char *"""
    return _gevmcc.gevGetSolver(pgev, modeltype)

def gevGetCurrentSolver(pgev, gmoptr):
    """gevGetCurrentSolver(pgev, gmoptr) -> char *"""
    return _gevmcc.gevGetCurrentSolver(pgev, gmoptr)

def gevGetSolverDefault(pgev, modeltype):
    """gevGetSolverDefault(pgev, modeltype) -> char *"""
    return _gevmcc.gevGetSolverDefault(pgev, modeltype)

def gevSolver2Id(pgev, solvername):
    """gevSolver2Id(pgev, solvername) -> int"""
    return _gevmcc.gevSolver2Id(pgev, solvername)

def gevId2Solver(pgev, solverid):
    """gevId2Solver(pgev, solverid) -> char *"""
    return _gevmcc.gevId2Solver(pgev, solverid)

def gevCallSolverNextGridDir(pgev):
    """gevCallSolverNextGridDir(pgev) -> char *"""
    return _gevmcc.gevCallSolverNextGridDir(pgev)

def gevCallSolver(pgev, gmoptr, cntrfn, solvername, solvelink, Logging, logfn, statfn, reslim, iterlim, domlim, optcr, optca, jobhandle):
    """gevCallSolver(pgev, gmoptr, cntrfn, solvername, solvelink, Logging, logfn, statfn, reslim, iterlim, domlim, optcr, optca, jobhandle) -> int"""
    return _gevmcc.gevCallSolver(pgev, gmoptr, cntrfn, solvername, solvelink, Logging, logfn, statfn, reslim, iterlim, domlim, optcr, optca, jobhandle)

def gevCallSolverHandleStatus(pgev, jobhandle):
    """gevCallSolverHandleStatus(pgev, jobhandle) -> int"""
    return _gevmcc.gevCallSolverHandleStatus(pgev, jobhandle)

def gevCallSolverHandleDelete(pgev, jobhandle):
    """gevCallSolverHandleDelete(pgev, jobhandle) -> int"""
    return _gevmcc.gevCallSolverHandleDelete(pgev, jobhandle)

def gevCallSolverHandleCollect(pgev, jobhandle, gmoptr):
    """gevCallSolverHandleCollect(pgev, jobhandle, gmoptr) -> int"""
    return _gevmcc.gevCallSolverHandleCollect(pgev, jobhandle, gmoptr)

def gevGetIntOpt(pgev, optname):
    """gevGetIntOpt(pgev, optname) -> int"""
    return _gevmcc.gevGetIntOpt(pgev, optname)

def gevGetDblOpt(pgev, optname):
    """gevGetDblOpt(pgev, optname) -> double"""
    return _gevmcc.gevGetDblOpt(pgev, optname)

def gevGetStrOpt(pgev, optname):
    """gevGetStrOpt(pgev, optname) -> char *"""
    return _gevmcc.gevGetStrOpt(pgev, optname)

def gevSetIntOpt(pgev, optname, ival):
    """gevSetIntOpt(pgev, optname, ival)"""
    return _gevmcc.gevSetIntOpt(pgev, optname, ival)

def gevSetDblOpt(pgev, optname, rval):
    """gevSetDblOpt(pgev, optname, rval)"""
    return _gevmcc.gevSetDblOpt(pgev, optname, rval)

def gevSetStrOpt(pgev, optname, sval):
    """gevSetStrOpt(pgev, optname, sval)"""
    return _gevmcc.gevSetStrOpt(pgev, optname, sval)

def gevSynchronizeOpt(pgev, optptr):
    """gevSynchronizeOpt(pgev, optptr)"""
    return _gevmcc.gevSynchronizeOpt(pgev, optptr)

def gevTimeJNow(pgev):
    """gevTimeJNow(pgev) -> double"""
    return _gevmcc.gevTimeJNow(pgev)

def gevTimeDiff(pgev):
    """gevTimeDiff(pgev) -> double"""
    return _gevmcc.gevTimeDiff(pgev)

def gevTimeDiffStart(pgev):
    """gevTimeDiffStart(pgev) -> double"""
    return _gevmcc.gevTimeDiffStart(pgev)

def gevTimeSetStart(pgev):
    """gevTimeSetStart(pgev)"""
    return _gevmcc.gevTimeSetStart(pgev)

def gevTerminateUninstall(pgev):
    """gevTerminateUninstall(pgev)"""
    return _gevmcc.gevTerminateUninstall(pgev)

def gevTerminateInstall(pgev):
    """gevTerminateInstall(pgev)"""
    return _gevmcc.gevTerminateInstall(pgev)

def gevTerminateSet(pgev, intr, ehdler):
    """gevTerminateSet(pgev, intr, ehdler)"""
    return _gevmcc.gevTerminateSet(pgev, intr, ehdler)

def gevTerminateGet(pgev):
    """gevTerminateGet(pgev) -> int"""
    return _gevmcc.gevTerminateGet(pgev)

def gevTerminateClear(pgev):
    """gevTerminateClear(pgev)"""
    return _gevmcc.gevTerminateClear(pgev)

def gevTerminateRaise(pgev):
    """gevTerminateRaise(pgev)"""
    return _gevmcc.gevTerminateRaise(pgev)

def gevTerminateGetHandler(pgev, intr, ehdler):
    """gevTerminateGetHandler(pgev, intr, ehdler)"""
    return _gevmcc.gevTerminateGetHandler(pgev, intr, ehdler)

def gevGetScratchName(pgev, s):
    """gevGetScratchName(pgev, s) -> char *"""
    return _gevmcc.gevGetScratchName(pgev, s)

def gevWriteModelInstance(pgev, mifn, gmoptr, INOUT):
    """gevWriteModelInstance(pgev, mifn, gmoptr, INOUT) -> int"""
    return _gevmcc.gevWriteModelInstance(pgev, mifn, gmoptr, INOUT)

def gevDuplicateScratchDir(pgev, scrdir, logfn):
    """gevDuplicateScratchDir(pgev, scrdir, logfn) -> int"""
    return _gevmcc.gevDuplicateScratchDir(pgev, scrdir, logfn)

def gevInitJacLegacy(pgev, evalptr, gmoptr):
    """gevInitJacLegacy(pgev, evalptr, gmoptr) -> int"""
    return _gevmcc.gevInitJacLegacy(pgev, evalptr, gmoptr)

def gevSetColRowPermLegacy(pgev, evalptr, n, cgms2slv, m, rgms2slv):
    """gevSetColRowPermLegacy(pgev, evalptr, n, cgms2slv, m, rgms2slv)"""
    return _gevmcc.gevSetColRowPermLegacy(pgev, evalptr, n, cgms2slv, m, rgms2slv)

def gevSetJacPermLegacy(pgev, evalptr, njacs, jacs, jgms2slv):
    """gevSetJacPermLegacy(pgev, evalptr, njacs, jacs, jgms2slv)"""
    return _gevmcc.gevSetJacPermLegacy(pgev, evalptr, njacs, jacs, jgms2slv)

def gevEvalNewPointLegacy(pgev, evalptr, x):
    """gevEvalNewPointLegacy(pgev, evalptr, x) -> int"""
    return _gevmcc.gevEvalNewPointLegacy(pgev, evalptr, x)

def gevEvalJacLegacy(pgev, evalptr, si, x, arg5, jac, arg7, arg8):
    """gevEvalJacLegacy(pgev, evalptr, si, x, arg5, jac, arg7, arg8) -> int"""
    return _gevmcc.gevEvalJacLegacy(pgev, evalptr, si, x, arg5, jac, arg7, arg8)

def gevEvalJacLegacyX(pgev, evalptr, cnt, rowidx, x, fvec, jac, arg8, arg9):
    """gevEvalJacLegacyX(pgev, evalptr, cnt, rowidx, x, fvec, jac, arg8, arg9) -> int"""
    return _gevmcc.gevEvalJacLegacyX(pgev, evalptr, cnt, rowidx, x, fvec, jac, arg8, arg9)

def gevNextNLLegacy(pgev, evalptr, si):
    """gevNextNLLegacy(pgev, evalptr, si) -> int"""
    return _gevmcc.gevNextNLLegacy(pgev, evalptr, si)

def gevRowGms2SlvLegacy(pgev, evalptr, si):
    """gevRowGms2SlvLegacy(pgev, evalptr, si) -> int"""
    return _gevmcc.gevRowGms2SlvLegacy(pgev, evalptr, si)

def gevFreeJacLegacy(pgev, evalptr):
    """gevFreeJacLegacy(pgev, evalptr)"""
    return _gevmcc.gevFreeJacLegacy(pgev, evalptr)

def gevGetALGX(pgev):
    """gevGetALGX(pgev) -> void *"""
    return _gevmcc.gevGetALGX(pgev)

def gevSkipIOLegacySet(pgev, x):
    """gevSkipIOLegacySet(pgev, x)"""
    return _gevmcc.gevSkipIOLegacySet(pgev, x)

def gevThreads(pgev):
    """gevThreads(pgev) -> int"""
    return _gevmcc.gevThreads(pgev)

def gevNSolves(pgev):
    """gevNSolves(pgev) -> double"""
    return _gevmcc.gevNSolves(pgev)
GLOBAL_MAX_INDEX_DIM = _gevmcc.GLOBAL_MAX_INDEX_DIM
GLOBAL_UEL_IDENT_SIZE = _gevmcc.GLOBAL_UEL_IDENT_SIZE
ITERLIM_INFINITY = _gevmcc.ITERLIM_INFINITY
GMS_MAX_INDEX_DIM = _gevmcc.GMS_MAX_INDEX_DIM
GMS_UEL_IDENT_SIZE = _gevmcc.GMS_UEL_IDENT_SIZE
GMS_SSSIZE = _gevmcc.GMS_SSSIZE
GMS_VARTYPE_UNKNOWN = _gevmcc.GMS_VARTYPE_UNKNOWN
GMS_VARTYPE_BINARY = _gevmcc.GMS_VARTYPE_BINARY
GMS_VARTYPE_INTEGER = _gevmcc.GMS_VARTYPE_INTEGER
GMS_VARTYPE_POSITIVE = _gevmcc.GMS_VARTYPE_POSITIVE
GMS_VARTYPE_NEGATIVE = _gevmcc.GMS_VARTYPE_NEGATIVE
GMS_VARTYPE_FREE = _gevmcc.GMS_VARTYPE_FREE
GMS_VARTYPE_SOS1 = _gevmcc.GMS_VARTYPE_SOS1
GMS_VARTYPE_SOS2 = _gevmcc.GMS_VARTYPE_SOS2
GMS_VARTYPE_SEMICONT = _gevmcc.GMS_VARTYPE_SEMICONT
GMS_VARTYPE_SEMIINT = _gevmcc.GMS_VARTYPE_SEMIINT
GMS_VARTYPE_MAX = _gevmcc.GMS_VARTYPE_MAX
GMS_EQUTYPE_E = _gevmcc.GMS_EQUTYPE_E
GMS_EQUTYPE_G = _gevmcc.GMS_EQUTYPE_G
GMS_EQUTYPE_L = _gevmcc.GMS_EQUTYPE_L
GMS_EQUTYPE_N = _gevmcc.GMS_EQUTYPE_N
GMS_EQUTYPE_X = _gevmcc.GMS_EQUTYPE_X
GMS_EQUTYPE_C = _gevmcc.GMS_EQUTYPE_C
GMS_EQUTYPE_MAX = _gevmcc.GMS_EQUTYPE_MAX
GMS_VAL_LEVEL = _gevmcc.GMS_VAL_LEVEL
GMS_VAL_MARGINAL = _gevmcc.GMS_VAL_MARGINAL
GMS_VAL_LOWER = _gevmcc.GMS_VAL_LOWER
GMS_VAL_UPPER = _gevmcc.GMS_VAL_UPPER
GMS_VAL_SCALE = _gevmcc.GMS_VAL_SCALE
GMS_VAL_MAX = _gevmcc.GMS_VAL_MAX
sv_valund = _gevmcc.sv_valund
sv_valna = _gevmcc.sv_valna
sv_valpin = _gevmcc.sv_valpin
sv_valmin = _gevmcc.sv_valmin
sv_valeps = _gevmcc.sv_valeps
sv_normal = _gevmcc.sv_normal
sv_acronym = _gevmcc.sv_acronym
GMS_SVIDX_UNDEF = _gevmcc.GMS_SVIDX_UNDEF
GMS_SVIDX_NA = _gevmcc.GMS_SVIDX_NA
GMS_SVIDX_PINF = _gevmcc.GMS_SVIDX_PINF
GMS_SVIDX_MINF = _gevmcc.GMS_SVIDX_MINF
GMS_SVIDX_EPS = _gevmcc.GMS_SVIDX_EPS
GMS_SVIDX_NORMAL = _gevmcc.GMS_SVIDX_NORMAL
GMS_SVIDX_ACR = _gevmcc.GMS_SVIDX_ACR
GMS_SVIDX_MAX = _gevmcc.GMS_SVIDX_MAX
dt_set = _gevmcc.dt_set
dt_par = _gevmcc.dt_par
dt_var = _gevmcc.dt_var
dt_equ = _gevmcc.dt_equ
dt_alias = _gevmcc.dt_alias
GMS_DT_SET = _gevmcc.GMS_DT_SET
GMS_DT_PAR = _gevmcc.GMS_DT_PAR
GMS_DT_VAR = _gevmcc.GMS_DT_VAR
GMS_DT_EQU = _gevmcc.GMS_DT_EQU
GMS_DT_ALIAS = _gevmcc.GMS_DT_ALIAS
GMS_DT_MAX = _gevmcc.GMS_DT_MAX
GMS_SV_UNDEF = _gevmcc.GMS_SV_UNDEF
GMS_SV_NA = _gevmcc.GMS_SV_NA
GMS_SV_PINF = _gevmcc.GMS_SV_PINF
GMS_SV_MINF = _gevmcc.GMS_SV_MINF
GMS_SV_EPS = _gevmcc.GMS_SV_EPS
GMS_SV_ACR = _gevmcc.GMS_SV_ACR
GMS_SV_NAINT = _gevmcc.GMS_SV_NAINT
# This file is compatible with both classic and new-style classes.


